<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.acamatch.academyCost.AcademyCostMapper">
    <select id="getInfoByTid">
        select t_id, user_id, product_id, cost_id, partner_order_id
        from academy_cost
        where t_id = #{tid}
    </select>
    <select id="getAcademyCostInfo">
        SELECT CC.costCount, SF.sumFee, SQ.saleRate
        FROM academy_cost AC
        JOIN
        (
        SELECT COUNT(cost_id) AS costCount, cost_id
        FROM academy_cost
        WHERE YEAR(created_at) = YEAR(NOW())  -- 현재 연도
        AND MONTH(created_at) = MONTH(NOW())
        AND cost_status = 2
        ) AS CC
        ON AC.cost_id = CC.cost_id
        JOIN
        (
        SELECT SUM(fee) AS sumFee, cost_id
        FROM academy_cost
        WHERE WEEK(created_at) = WEEK(NOW())
        AND YEAR(created_at) = YEAR(NOW())  -- 같은 연도 내에서 이번 주 데이터만 선택
        AND cost_status = 2
        GROUP BY cost_id
        ) AS SF
        ON AC.cost_id = SF.cost_id
        JOIN
        (
        SELECT SP.cost_id, SP.saleRate
        FROM academy_cost AC
        JOIN (
        SELECT sum(AC.amount) / B.book_amount AS saleRate, AC.cost_id
        FROM book B
        JOIN product P
        ON B.book_id = P.book_id
        JOIN academy_cost AC
        ON P.product_id = AC.product_id
        WHERE AC.cost_status = 2
        ) SP
        ON AC.cost_id = SP.cost_id
        ) SQ
        ON SQ.cost_id = AC.cost_id
    </select>
    <select id="getBookIdByProductId">
        select book_id
        from product
        where product_id = #{productId}
    </select>
    <select id="getProductIdByBookId">
        select product_id
        from book
        where book_id = #{bookId}
    </select>
    <select id="getSettlementList">
        SELECT IFNULL(A1.aca_id, A2.aca_id) AS acaId,
        IFNULL(A1.aca_name, A2.aca_name) AS acaName,
        IFNULL(A1.address, A2.address) AS address,
        IFNULL(AP1.aca_pic, AP2.aca_pic) AS acaPic,
        AC.updated_at AS updatedAt,
        AC.price - AC.fee AS price, AC.status,
        AC.created_at AS createdAt,
        AC.cost_id,
        TC.totalCount
        FROM academy_cost AC
        JOIN product P ON AC.product_id = P.product_id
        LEFT JOIN book B ON P.book_id = B.book_id
        LEFT JOIN aca_class C1 ON P.class_id = C1.class_id
        LEFT JOIN aca_class C2 ON B.class_id = C2.class_id
        LEFT JOIN academy A1 ON C1.aca_id = A1.aca_id
        LEFT JOIN academy A2 ON C2.aca_id = A2.aca_id
        LEFT JOIN academy_pic AP1 ON A1.aca_id = AP1.aca_id
        LEFT JOIN academy_pic AP2 ON A2.aca_id = AP2.aca_id
        LEFT JOIN
        (
        SELECT COUNT(AC.cost_id) AS totalCount, AC.cost_id
        FROM academy_cost AC
        <where>
            AC.product_id != 1
            AND AC.cost_status = 2
            <if test=" status != null ">
                AND AC.status = #{status}
            </if>
            <if test=" year != null and year != '' ">
                AND YEAR(AC.created_at) = #{year}
            </if>
            <if test=" month != null and month != '' ">
                AND MONTH(AC.created_at) = #{month}
            </if>
        </where>
        ) TC
        ON AC.cost_id = TC.cost_id
        <where>
            P.product_id != 1
            AND AC.cost_status = 2
            <if test=" status != null ">
                AND AC.status = #{status}
            </if>
            <if test=" year != null and year != '' ">
                AND YEAR(AC.created_at) = #{year}
            </if>
            <if test=" month != null and month != '' ">
                AND MONTH(AC.created_at) = #{month}
            </if>
        </where>
        GROUP BY cost_id
        LIMIT #{startIdx}, #{size}
    </select>
    <select id="getAcademyCostInfoByCostId">
        SELECT AC.*, U.name
        FROM academy_cost AC
        JOIN User U ON AC.user_id = U.user_id
        WHERE cost_id = #{costId}
    </select>
</mapper>