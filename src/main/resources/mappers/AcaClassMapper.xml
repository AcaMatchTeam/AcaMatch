<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.acamatch.acaClass.AcaClassMapper">

<!--    &lt;!&ndash; class 등록하기 &ndash;&gt;-->
<!--    <insert id="insAcaClass" useGeneratedKeys="true" keyProperty="classId">-->
<!--        INSERT INTO class-->
<!--        SET aca_id = #{acaId},-->
<!--            class_name = #{className},-->
<!--            class_comment = #{classComment},-->
<!--            start_date = #{startDate},-->
<!--            end_date = #{endDate},-->
<!--            start_time = #{startTime},-->
<!--            end_time = #{endTime},-->
<!--            price = #{price}-->
<!--    </insert>-->

<!--    &lt;!&ndash; 존재하는 class인지 중복체크&ndash;&gt;-->
<!--    <select id ="existsClass" parameterType="map" resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM class-->
<!--        WHERE aca_id = #{acaId} AND class_name = #{className}-->
<!--    </select>-->

<!--    &lt;!&ndash; 존재하는 요일인지 중복체크&ndash;&gt;-->
<!--    <select id="existsDay" parameterType="map" resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM weekdays-->
<!--        WHERE day = #{day}-->
<!--    </select>-->

<!--    &lt;!&ndash; 요일 등록하기 &ndash;&gt;-->
<!--    <insert id="insWeekDay" useGeneratedKeys="true" keyProperty="dayId">-->
<!--        INSERT weekdays-->
<!--        SET day = #{day}-->
<!--    </insert>-->

<!--    &lt;!&ndash; 수업과 요일을 잇는 관계 테이블 등록하기 &ndash;&gt;-->
<!--    <insert id = "insAcaClassClassWeekDays">-->
<!--        INSERT classweekdays-->
<!--        SET class_id = #{classId},-->
<!--        day_id = #{dayId}-->
<!--    </insert>-->

<!--    &lt;!&ndash; 수업 개강 요일이 존재하는지 중복체크&ndash;&gt;-->
<!--    <select id ="existsClassWeekDays" parameterType="map" resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM classweekdays-->
<!--        WHERE day_id = #{dayId} AND class_id = #{classId}-->
<!--    </select>-->

<!--    <insert id = "insAcaClassCategory">-->
<!--        INSERT classcategory-->
<!--        SET class_id = #{classId},-->
<!--        category_id = #{categoryId}-->
<!--    </insert>-->

<!--    <select id = "existsCategory" parameterType="map" resultType="int">-->
<!--        SELECT COUNT(*)-->
<!--        FROM classcategory-->
<!--        WHERE class_id = #{classId} AND category_id = #{categoryId}-->
<!--    </select>-->

    <!-- class 상세 정보 가져오기
    중복된 내용은 나오지 않게 하기위해 resultmap 사용 -->
    <resultMap id="ClassResultMap" type = "com.green.acamatch.acaClass.model.AcaClassDetailDto">
        <id property="classId" column="class_id" />
        <result property="className" column="class_name" />
        <result property="classComment" column="class_comment" />
        <result property="startDate" column="start_date" />
        <result property="endDate" column="end_date" />
        <result property="startTime" column="start_time" />
        <result property="endTime" column="end_time" />
        <result property="price" column="price" />
        <collection property="day" resultMap="AcaClassWeekDayResultMap" />
        <collection property="YearsAndLevel" resultMap="YearsAndLevelResultMap" />
    </resultMap>

    <resultMap id="AcaClassWeekDayResultMap" type="String">
        <id property="day" column="day" />
    </resultMap>

    <resultMap id="YearsAndLevelResultMap" type="String">
        <id property="categoryName" column="category_name" />
    </resultMap>

    <select id="selAcaClassDetail" resultMap="ClassResultMap">
        SELECT B.aca_name, A.class_id, A.class_name, A.class_comment, A.start_date, A.end_date, A.start_time, A.end_time, A.price,
        D.`day`, F.category_name
        FROM aca_class A
        INNER JOIN academy B
        ON A.aca_id = B.aca_id
        LEFT JOIN class_weekdays C
        ON C.class_id = A.class_id
        LEFT JOIN weekdays D
        ON C.day_id = D.day_id
        LEFT JOIN class_category E
        ON A.class_id = E.class_id
        LEFT JOIN category F
        ON E.category_id = F.category_id
        WHERE A.aca_id = #{acaId}
        ORDER BY D.day_id
        LIMIT #{startIdx}, #{size}
    </select>

    <!-- 특정 수업에 등록한 user 가져오기 -->
    <select id="selAcaClassToUser">
        SELECT B.aca_name, A.class_name, A.start_date, A.end_date, B.aca_pic
        FROM aca_class A
        INNER JOIN academy B
        ON A.aca_id = B.aca_id
        INNER JOIN join_class C
        ON A.class_id = C.class_id
        INNER JOIN user D
        ON C.user_id = D.user_id
        WHERE C.user_id = #{userId}
        LIMIT #{startIdx},#{size}
    </select>

    <!-- 특정 user가 등록한 수업 가져오기 -->
    <select id="selAcaClassUser">
        SELECT C.user_id, C.user_pic, C.name, C.phone, C.birth
        FROM join_class A
        INNER JOIN aca_class B
        ON A.class_id = B.class_id
        INNER JOIN user C
        ON A.user_id = C.user_id
        WHERE A.class_id = #{classId}
        LIMIT #{startIdx}, #{size}
    </select>

    <resultMap id="selAcademyClass" type="com.green.acamatch.acaClass.model.AcaClassDto">
        <id property="acaId" column="aca_id" />
        <result property="acaPics" column="aca_pics" />
        <result property="acaPic" column="aca_pic" />
        <result property="className" column="class_name" />
        <result property="startDate" column="start_date"/>
        <result property="endDate" column="end_date" />
        <result property="keyword" column="keyword" />
        <result property="name" column="teacher_name"/>
    </resultMap>

    <!-- 학원당 강좌 가져오기 -->
    <select id = "selAcaClass" resultMap="selAcademyClass">
        SELECT
        GROUP_CONCAT(DISTINCT C.aca_pic ORDER BY C.aca_pic SEPARATOR ',') AS aca_pics,
        C.aca_pic, A.class_id, A.class_name, E.name AS teacher_name, A.start_date, A.end_date
        FROM aca_class A
        INNER JOIN academy B
        ON A.aca_id = B.aca_id
        INNER JOIN academy_pic C
        ON B.aca_id = C.aca_id
        LEFT JOIN teacher D
        ON B.aca_id = D.aca_id
        LEFT JOIN `user` E
        ON D.user_id = E.user_id
        WHERE B.aca_id = #{acaId}
        GROUP BY A.class_id, E.name
        <if test="keyword != null and keyword != '' ">
            OR A.class_name LIKE '%${keyword}%'
        </if>
        ORDER BY A.class_id
        LIMIT #{startIdx}, #{size}
    </select>

<!--    &lt;!&ndash; 수업 수정하기 &ndash;&gt;-->
<!--    <update id="updAcaClass">-->
<!--        UPDATE class-->
<!--        <set>-->
<!--            <if test =" classId != null and classId != '' ">-->
<!--                class_id = #{classId},-->
<!--            </if>-->
<!--            <if test =" className != null and className != '' ">-->
<!--                class_name = #{className},-->
<!--            </if>-->
<!--            <if test =" classComment != null and classComment != '' ">-->
<!--                class_comment = #{classComment},-->
<!--            </if>-->
<!--            <if test =" startDate != null and startDate != '' ">-->
<!--                start_date = #{startDate},-->
<!--            </if>-->
<!--            <if test =" endDate != null and endDate != '' ">-->
<!--                end_date = #{endDate},-->
<!--            </if>-->
<!--            <if test =" startTime != null and startTime != '' ">-->
<!--                start_time = #{startTime},-->
<!--            </if>-->
<!--            <if test =" endTime != null and endTime != '' ">-->
<!--                end_time = #{endTime},-->
<!--             </if>-->
<!--            <if test =" price != null ">-->
<!--                price = #{price}-->
<!--            </if>-->
<!--        </set>-->
<!--        WHERE aca_id = #{acaId} AND class_id = #{classId}-->
<!--    </update>-->

<!--    &lt;!&ndash; 학원 수업 삭제하기 &ndash;&gt;-->
<!--    <delete id="delAcaClass">-->
<!--        DELETE FROM class-->
<!--        WHERE class_id = #{classId} AND aca_id = #{acaId}-->
<!--    </delete>-->

<!--    &lt;!&ndash; 수업에 개강한 요일 삭제하기 &ndash;&gt;-->
<!--    <delete id ="delAcaClassDay">-->
<!--        DELETE FROM classweekdays-->
<!--        WHERE class_id = #{classId} AND day_id = #{dayId}-->
<!--    </delete>-->
</mapper>