<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.acamatch.academy.mapper.AcademyMapper">


<!--태그 select-->
    <select id="selTagDtoList">
        SELECT tag_id as tagId,tag_name as tagName
        FROM tag
        <where>
            <if test="searchTag != null and searchTag != ''">
                tag_name LIKE CONCAT('%', #{searchTag}, '%')
            </if>
        </where>
    </select>


<!--태그 학원등록-->
    <insert id="insAcaTag">
        INSERT INTO academytag (aca_id, tag_id)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{acaId}, #{tagId})
        </foreach>
    </insert>

<!--학원 주소 동pk 뽑아내기-->
    <select id="selAddressDong">
        SELECT dong_id
        FROM dong
        WHERE dong_name LIKE CONCAT('%', #{dongName}, '%');
    </select>


<!--학원정보등록-->
    <insert id="insAcademy" useGeneratedKeys="true" keyProperty="acaId">
        INSERT INTO academy
           SET user_id = #{userId}
             , dong_id = #{dongId}
             , aca_name = #{acaName}
             , aca_phone = #{acaPhone}
             , comment = #{comment}
             , teacher_num = #{teacherNum}
             , open_time = #{openTime}
             , close_time = #{closeTime}
             , address = #{address}
             , aca_pic = #{acaPic}
    </insert>


<!--학원정보수정-->
    <update id="updAcademy">
        UPDATE academy
        <set>
            <if test="acaName != null and acaName != ''">
                aca_name = #{acaName}
            </if>
            <if test="acaPhone != null and acaPhone != ''">
                , aca_phone = #{acaPhone}
            </if>
            <if test="comment != null and comment != ''">
                , comment = #{comment}
            </if>
            <if test="teacherNum != null and teacherNum != ''">
                , teacher_num = #{teacherNum}
            </if>
            <if test="openTime != null and openTime != ''">
                , open_time = #{openTime}
            </if>
            <if test="closeTime != null and closeTime != ''">
                , close_time = #{closeTime}
            </if>
            <if test="acaPic != null and acaPic != ''">
                , aca_pic = #{acaPic}
            </if>
            <if test="address != null and address != ''">
                , address = #{address}
            </if>
        </set>
        WHERE aca_id = #{acaId}
        AND user_id = #{userId}
    </update>


    <select id="getAcademyAddress">
        SELECT address
        FROM academy
        WHERE aca_id = #{acaId}
    </select>

<!--학원정보수정에서 태그수정을 위한 삭제처리-->
    <delete id="delAcaTag">
        DELETE FROM academytag
        WHERE aca_id = #{acaId}
    </delete>


<!--학원정보삭제-->
    <delete id="delAcademy">
        DELETE FROM academy
         WHERE aca_id = #{acaId}
           AND user_id = #{userId}
    </delete>

<!--학원 좋아요 순-->
    <select id="getAcademyBest" resultType="com.green.acamatch.academy.model.AcademyBestLikeGetRes">
        SELECT aca_id AS acaId, COUNT(aca_id) AS likeCount
          FROM `like`
         GROUP BY aca_id
         ORDER BY likeCount DESC
         LIMIT #{startIdx}, #{size}
    </select>

    <!-- 학원 검색 -->

    <resultMap id="searchResultMap" type = "com.green.acamatch.academy.model.GetAcademyListRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler" />
    </resultMap>

    <select id="getAcademy" >
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_id IN (
        SELECT DISTINCT E.aca_id
        FROM academytag E
        JOIN tag F
        ON E.tag_id = F.tag_id
        WHERE F.tag_name LIKE CONCAT('%', #{tagName}, '%')
        )
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 학원 상세 정보 보기 -->
    <select id="getAcademyDetail">
        SELECT A.aca_id, A.aca_phone, A.aca_name, A.aca_pic, A.COMMENT, A.teacher_num, A.open_time, A.close_time, address
        FROM academy A
        WHERE aca_id = #{acaId}
    </select>

    <!-- 학원 태그 리스트 불러오기 -->
    <select id="getTagList">
        SELECT A.tag_id, A.tag_name
        FROM tag A
        JOIN academytag B
        ON A.tag_id = B.tag_id
        JOIN academy C
        ON B.aca_id = C.aca_id
        WHERE C.aca_id = #{acaId}
    </select>

    <!-- 검색어를 입력받아 태그 불러오기 -->
    <select id="getTagListBySearchName">
        SELECT tag_id AS tagId, tag_name AS tagName
        FROM tag
        WHERE tag_name LIKE CONCAT('%', #{tagName}, '%')
        ORDER BY tag_id
    </select>

    <!-- 검색어가 없을때 모든 태그 리스트 출력하기-->
    <select id="getAllTagList">
        SELECT tag_id, tag_name
        FROM tag
        ORDER BY tag_id
    </select>

    <!-- 카테고리로 필터링하기-->
    <select id="getCategorySearch">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM
        academy A
        LEFT JOIN
        academytag E ON A.aca_id = E.aca_id
        LEFT JOIN
        tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM
        review R
        JOIN
        class C ON R.join_class_id = C.class_id
        GROUP BY
        C.aca_id
        ) G ON G.aca_id = A.aca_id
        WHERE
        A.dong_id = #{dongId}
        AND A.aca_name IN (
        SELECT DISTINCT F.aca_name
        FROM categorytype A
        INNER JOIN category B ON A.category_type_id = B.category_type_id
        INNER JOIN classcategory D ON B.category_id = D.category_id
        INNER JOIN class E ON E.class_id = D.class_id
        INNER JOIN academy F ON E.aca_id = F.aca_id
        WHERE B.category_name IN (#{FirstCategoryName})
        AND EXISTS (
        SELECT 1
        FROM category B2
        INNER JOIN classcategory D2 ON B2.category_id = D2.category_id
        WHERE B2.category_name IN (#{SecondCategoryName})
        AND D2.class_id = E.class_id
        )
        )
        GROUP BY
        A.aca_id
        ORDER BY
        G.star DESC
        LIMIT #{startIdx}, #{size};

    </select>

    <!-- 검색시에 search 테이블에 post-->
    <insert id="postSearch" useGeneratedKeys="true" keyProperty="searchId">
        insert into search
        set tag_id = #{tagId}
    </insert>

    <!-- 도시 리스트 불러오기-->
    <select id="getCity">
        SELECT city_id, city_name
        FROM city
    </select>

    <!-- 시/군/구 리스트 불러오기-->
    <select id="getStreet">
        SELECT street_id, street_name
        FROM street
        WHERE city_id = #{cityId}
    </select>

    <!-- 동 리스트 불러오기-->
    <select id="getDong">
        SELECT A.dong_id, A.dong_name
        FROM dong A
        JOIN street B
        ON A.street_id = B.street_id
        WHERE B.street_id = #{streetId}
        AND city_id = #{cityId};
    </select>

    <!-- 동까지만 입력받아 학원 리스트 불러오기-->
    <select id = "getAcademyListByDong">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 검색어 입력받아서 학원 검색하기-->
    <select id="getAcademyListBySearchName">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_name like concat ('%', #{searchName}, '%')
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size}
    </select>

    <!-- 검색어만 입력받아 학원 리스트 출력하기-->
    <select id="getAcademyByOnlySearchName">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.aca_name like concat ('%', #{searchName}, '%')
        GROUP BY A.aca_id
        ORDER BY A.aca_id ASC
        LIMIT #{startIdx}, #{size}
    </select>

    <!-- 학원 관리자가 본인이 등록한 학원 리스트 보기-->
    <select id="getAcademyListByUserId">
        SELECT A.aca_id, A.aca_name, A.created_at
        FROM academy A
        WHERE user_id = #{signedUserId}
    </select>

    <!-- 모든 입력을 받고 학원 리스트 불러오기-->
    <select id="getAcademyListByAll" resultMap="searchResultMap">
        SELECT
        A.aca_id AS acaId,
        count(A.aca_id) AS totalAcademy,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM
        academy A
        LEFT JOIN
        academytag E ON A.aca_id = E.aca_id
        LEFT JOIN
        tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM
        review R
        JOIN
        class C ON R.join_class_id = C.class_id
        GROUP BY
        C.aca_id
        ) G ON G.aca_id = A.aca_id
        WHERE
        1 = 1

        AND (#{dongId} IS NULL OR A.dong_id = #{dongId})

        AND (#{searchName} IS NULL OR A.aca_name LIKE CONCAT('%', #{searchName}, '%'))

        AND (
        #{tagName} IS NULL
        OR EXISTS (
        SELECT 1
        FROM academytag E2
        JOIN tag F2 ON E2.tag_id = F2.tag_id
        WHERE E2.aca_id = A.aca_id
        AND F2.tag_name LIKE CONCAT('%', #{tagName}, '%')
        )
        )

        AND (
        #{FCName} IS NULL
        OR EXISTS (
        SELECT 1
        FROM categorytype CT
        INNER JOIN category C ON CT.category_type_id = C.category_type_id
        INNER JOIN classcategory CC ON C.category_id = CC.category_id
        INNER JOIN class CL ON CC.class_id = CL.class_id
        WHERE CL.aca_id = A.aca_id
        AND C.category_name = #{FCName}
        AND (
        #{SCName} IS NULL
        OR EXISTS (
        SELECT 1
        FROM category C2
        INNER JOIN classcategory CC2 ON C2.category_id = CC2.category_id
        WHERE CC2.class_id = CL.class_id
        AND C2.category_name = #{SCName}
        )
        )
        )
        )
        GROUP BY
        A.aca_id
        ORDER BY
        G.star DESC
        LIMIT #{startIdx}, #{size};

    </select>

    <insert id="postToSearch">
        INSERT INTO search
        SET tag_id =
        (SELECT tag_id
        FROM tag
        WHERE tag_name = #{tagName})
    </insert>

    <resultMap id="AcademyResultMap" type="com.green.acamatch.academy.model.GetAcademyDetailRes">
        <!-- 학원 정보 매핑 -->
        <id property="acaId" column="acaId"/>
        <result property="acaName" column="acaName"/>
        <result property="acaPic" column="acaPic"/>
        <result property="address" column="address"/>
        <result property="acaPhone" column="acaPhone"/>
        <result property="teacherNum" column="teacherNum"/>
        <result property="comments" column="comments"/>
        <result property="star" column="star"/>
        <result property="reviewCount" column="reviewCount"/>
        <result property="likeCount" column="likeCount"/>
        <result property="isLiked" column="isLiked"/>

        <!-- 클래스 정보 매핑 (하위 리스트) -->
        <collection property="classes" ofType="com.green.acamatch.academy.model.GetAcademyDetailClassDto">
            <id property="classId" column="classId"/>
            <result property="className" column="className"/>
            <result property="classComment" column="classComment"/>
            <result property="classStartDate" column="classStartDate"/>
            <result property="classEndDate" column="classEndDate"/>
            <result property="classStartTime" column="classStartTime"/>
            <result property="classEndTime" column="classEndTime"/>
            <result property="classPrice" column="classPrice"/>
            <result property="classDay" column="classDay"/>
            <result property="classCategoryName" column="classCategoryName"/>
        </collection>

        <!-- 리뷰 정보 매핑 (하위 리스트) -->
        <collection property="reviews" ofType="com.green.acamatch.academy.model.ReviewDto">
            <result property="comment" column="reviewComment"/>
            <result property="star" column="reviewStar"/>
            <result property="createdAt" column="reviewCreatedAt"/>
            <result property="userId" column="reviewUserId"/>
            <result property="nickName" column="reviewUserNickName"/>
            <result property="className" column="reviewClassName"/>
        </collection>
    </resultMap>

    <select id="getAcademyWithClasses" resultMap="AcademyResultMap">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address,
        A.aca_phone AS acaPhone,
        A.teacher_num AS teacherNum,
        IFNULL(A.comment, 'No comments') AS comments,
        COALESCE(G.star, 0) AS star,
        COALESCE(R.reviewCount, 0) AS reviewCount,
        COALESCE(L.likesCount, 0) AS likeCount,
        CASE
        WHEN UL.user_id IS NOT NULL THEN TRUE
        ELSE FALSE
        END AS isLiked,

        -- 클래스 정보
        C.class_id AS classId,
        C.class_name AS className,
        C.class_comment AS classComment,
        C.start_date AS classStartDate,
        C.end_date AS classEndDate,
        C.start_time AS classStartTime,
        C.end_time AS classEndTime,
        C.price AS classPrice,
        GROUP_CONCAT(DISTINCT W.`day` ORDER BY W.`day_id` ASC SEPARATOR ', ') AS classDay,
        GROUP_CONCAT(DISTINCT CAT.category_name ORDER BY CAT.category_name ASC SEPARATOR ', ') AS classCategoryName,

        -- 리뷰 정보
        RV.comment AS reviewComment,
        RV.star AS reviewStar,
        RV.created_at AS reviewCreatedAt,
        JC.user_id AS reviewUserId,
        U.nick_name AS reviewUserNickName,
        RC.class_name AS reviewClassName

        FROM academy A
        LEFT JOIN (
        SELECT ROUND(AVG(R.star), 2) AS star, C.aca_id
        FROM review R
        JOIN class C ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G ON G.aca_id = A.aca_id
        LEFT JOIN class C ON A.aca_id = C.aca_id
        LEFT JOIN (
        SELECT aca_id, COUNT(*) AS likesCount
        FROM `like`
        GROUP BY aca_id
        ) L ON L.aca_id = A.aca_id
        LEFT JOIN (
        SELECT C.aca_id, COUNT(*) AS reviewCount
        FROM review R
        JOIN class C ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) R ON R.aca_id = A.aca_id
        LEFT JOIN classcategory CC ON C.class_id = CC.class_id
        LEFT JOIN category CAT ON CC.category_id = CAT.category_id
        LEFT JOIN classweekdays CW ON C.class_id = CW.class_id
        LEFT JOIN weekdays W ON CW.day_id = W.day_id
        LEFT JOIN (
        SELECT aca_id, user_id
        FROM `like`
        WHERE user_id = #{signedUserId}
        ) UL ON UL.aca_id = A.aca_id
        LEFT JOIN review RV ON RV.join_class_id = C.class_id
        LEFT JOIN joinclass JC ON RV.join_class_id = JC.join_class_id
        LEFT JOIN user U ON JC.user_id = U.user_id
        LEFT JOIN class RC ON RV.join_class_id = RC.class_id
        WHERE A.aca_id = #{acaId}
        GROUP BY A.aca_id, C.class_id, RV.comment, RV.star, RV.created_at, JC.user_id, U.nick_name, RC.class_name
        ORDER BY C.class_id
    </select>

    <select id="getAcademyListDefault">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        GROUP BY A.aca_id
        ORDER BY RAND()
        LIMIT 0, 5;
    </select>

    <select id="getAcademyListByStudent">
        SELECT DISTINCT
        A.aca_id,
        A.aca_pic,
        A.aca_name
        FROM academy A
        JOIN class C ON A.aca_id = C.aca_id
        JOIN joinclass JC ON C.class_id = JC.class_id
        WHERE JC.user_id = #{signedUserId}
        ORDER BY A.aca_name ASC
        LIMIT #{startIdx}, #{size}
    </select>

    <select id="popularSearch">
        SELECT
        T.tag_name,
        COUNT(S.tag_id) AS tag_count
        FROM search S
        JOIN tag T ON S.tag_id = T.tag_id
        GROUP BY T.tag_name
        ORDER BY tag_count DESC
    </select>
</mapper>
