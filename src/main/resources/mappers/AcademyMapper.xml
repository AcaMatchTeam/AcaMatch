<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.acamatch.academy.mapper.AcademyMapper">


<!--태그 select-->
    <select id="selTagDtoList">
        SELECT tag_id as tagId,tag_name as tagName
        FROM tag
        <where>
            <if test="searchTag != null and searchTag != ''">
                tag_name LIKE CONCAT('%', #{searchTag}, '%')
            </if>
        </where>
    </select>


<!--태그 학원등록-->
    <insert id="insAcaTag">
        INSERT INTO academytag (aca_id, tag_id)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{acaId}, #{tagId})
        </foreach>
    </insert>

<!--학원 주소 시pk 뽑아내기-->
    <select id="selAddressCity">
        SELECT city_id
        FROM city
        WHERE city_name LIKE CONCAT('%', #{cityName}, '%')
    </select>


    <!--학원 주소 구pk 뽑아내기-->
    <select id="selAddressStreet">
        SELECT street_id
        FROM street
        WHERE street_name = #{streetName}
        AND city_id = #{cityId}
    </select>

<!--학원 주소 동pk 뽑아내기-->
    <select id="selAddressDong">
        SELECT dong_id
        FROM dong
        WHERE dong_name = #{dongName}
        AND street_id = #{streetId}
    </select>


<!--학원정보등록-->
    <insert id="insAcademy" useGeneratedKeys="true" keyProperty="acaId">
        INSERT INTO academy
           SET user_id = #{userId}
             , dong_id = #{dongId}
             , aca_name = #{acaName}
             , aca_phone = #{acaPhone}
             , comment = #{comment}
             , teacher_num = #{teacherNum}
             , open_time = #{openTime}
             , close_time = #{closeTime}
             , address = #{address}
             , aca_pic = #{acaPic}
    </insert>


<!--학원정보수정-->
    <update id="updAcademy">
        UPDATE academy
        <set>
            <if test="dongId != '' and dongId != null">
                dong_id = #{dongId}
            </if>
            <if test="acaName != null and acaName != ''">
                , aca_name = #{acaName}
            </if>
            <if test="acaPhone != null and acaPhone != ''">
                , aca_phone = #{acaPhone}
            </if>
            <if test="comment != null and comment != ''">
                , comment = #{comment}
            </if>
            <if test="teacherNum != null and teacherNum != ''">
                , teacher_num = #{teacherNum}
            </if>
            <if test="openTime != null and openTime != ''" >
                , open_time = #{openTime}
            </if>
            <if test="closeTime != null and closeTime != ''">
                , close_time = #{closeTime}
            </if>
            <if test="acaPic != null">
                , aca_pic = #{acaPic}
            </if>
            <if test="address != null and address != ''">
                , address = #{address}
            </if>

        </set>
        WHERE aca_id = #{acaId}
        AND user_id = #{userId}
    </update>


<!-- db에 주소 뽑아내기-->
    <select id="getAcademyAddress">
        SELECT address
        FROM academy
        WHERE aca_id = #{acaId}
    </select>

<!--학원정보수정에서 태그수정을 위한 삭제처리-->
    <delete id="delAcaTag">
        DELETE FROM academytag
        WHERE aca_id = #{acaId}
    </delete>


<!--학원정보삭제-->
    <delete id="delAcademy">
        DELETE FROM academy
         WHERE aca_id = #{acaId}
           AND user_id = #{userId}
    </delete>

<!--학원 좋아요 순-->
    <select id="getAcademyBest" resultType="com.green.acamatch.academy.model.JW.AcademyBestLikeGetRes">
        SELECT a.aca_id,
                COUNT(DISTINCT a.user_id) AS like_count,
                b.aca_name, b.aca_pic,
                GROUP_CONCAT(DISTINCT c.tag_id ORDER BY c.tag_id ASC) AS tag_ids,
                GROUP_CONCAT(DISTINCT g.tag_name ORDER BY c.tag_id ASC) AS tag_names,
                ifnull(AVG(f.star), 0) AS star_avg,
                COUNT(DISTINCT f.`comment`) AS review_count
         FROM `like` a
         LEFT JOIN `academy` b
           ON a.aca_id = b.aca_id
         LEFT JOIN `academytag` c
           ON a.aca_id = c.aca_id
         LEFT JOIN `class` d
           ON b.aca_id = d.aca_id
         LEFT JOIN `joinclass` e
           ON d.class_id = e.class_id
         LEFT JOIN `review` f
           ON e.join_class_id = f.join_class_id
         LEFT JOIN `tag` g
           ON c.tag_id = g.tag_id
        GROUP BY a.aca_id
        ORDER BY like_count DESC
        LIMIT #{startIdx}, #{size}
    </select>

    <select id="selAcademyCount">
        SELECT COUNT(aca_id) AS academy_count
        FROM academy
    </select>

    <select id="selAcademyLikeCount">
        SELECT COUNT(DISTINCT a.aca_id) AS academy_like_count
        FROM `like` a
    </select>

    <!-- 학원 검색 -->

    <resultMap id="searchResultMap" type = "com.green.acamatch.academy.model.HB.GetAcademyListRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>


    <select id="getAcademy" >
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_id IN (
        SELECT DISTINCT E.aca_id
        FROM academytag E
        JOIN tag F
        ON E.tag_id = F.tag_id
        WHERE F.tag_name LIKE CONCAT('%', #{tagName}, '%')
        )
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 학원 상세 정보 보기 -->
    <select id="getAcademyDetail">
        SELECT A.aca_id, A.aca_phone, A.aca_name, A.aca_pic, A.COMMENT, A.teacher_num, A.open_time, A.close_time, address
        FROM academy A
        WHERE aca_id = #{acaId}
    </select>

    <!-- 학원 태그 리스트 불러오기 -->
    <select id="getTagList">
        SELECT A.tag_id, A.tag_name
        FROM tag A
        JOIN academytag B
        ON A.tag_id = B.tag_id
        JOIN academy C
        ON B.aca_id = C.aca_id
        WHERE C.aca_id = #{acaId}
    </select>

    <!-- 검색어를 입력받아 태그 불러오기 -->
    <select id="getTagListBySearchName">
        SELECT tag_id AS tagId, tag_name AS tagName
        FROM tag
        WHERE tag_name LIKE CONCAT('%', #{tagName}, '%')
        ORDER BY tag_id
    </select>

    <!-- 검색어가 없을때 모든 태그 리스트 출력하기-->
    <select id="getAllTagList">
        SELECT tag_id, tag_name
        FROM tag
        ORDER BY tag_id
    </select>

    <!-- 검색시에 search 테이블에 post-->
    <insert id="postSearch" useGeneratedKeys="true" keyProperty="searchId">
        insert into search
        set tag_id = #{tagId}
    </insert>

    <!-- 학원 관리자가 본인이 등록한 학원 리스트 보기-->
    <select id="getAcademyListByUserId">
        SELECT A.aca_id, A.aca_name, A.created_at, A.aca_agree, A.aca_pic
        FROM academy A
        WHERE user_id = #{signedUserId}
    </select>

    <!-- 모든 입력을 받고 학원 리스트 불러오기-->
    <select id="getAcademyListByAll" resultMap="searchResultMap">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star,
        COUNT(*) OVER() AS totalCount
        FROM academy A
        LEFT JOIN academytag E ON A.aca_id = E.aca_id
        LEFT JOIN tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN joinclass JC ON R.join_class_id = JC.join_class_id
        JOIN class C ON JC.class_id = C.class_id
        GROUP BY C.aca_id ) G ON G.aca_id = A.aca_id
        WHERE 1 = 1
        AND (#{dongId} IS NULL OR A.dong_id = #{dongId})
        AND (#{searchName} IS NULL OR A.aca_name LIKE CONCAT('%', #{searchName}, '%'))
        <if test=" tagName != null and tagName != '' ">
            AND (
            SELECT 1 FROM academytag E2
            JOIN tag F2 ON E2.tag_id = F2.tag_id
            WHERE E2.aca_id = A.aca_id
            AND F2.tag_name = #{tagName})
        </if>
        <if test=" categoryIds != null and categoryIds != '' ">
            AND ( A.aca_id IN
            (SELECT CL.aca_id FROM class CL
            JOIN classcategory CC ON CL.class_id = CC.class_id
            WHERE CC.category_id IN
            <foreach collection="categoryIds" item="CId" open="(" close=")" separator=",">
                #{CId}
            </foreach>
            ))
        </if>
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size}
    </select>

    <insert id="postToSearch">
        INSERT INTO search
        SET tag_id =
        (SELECT tag_id
        FROM tag
        WHERE tag_name = #{tagName})
    </insert>

<!--    <resultMap id="AcademyResultMap" type="com.green.acamatch.academy.model.HB.GetAcademyDetailRes">-->
<!--        &lt;!&ndash; 학원 정보 매핑 &ndash;&gt;-->
<!--        <id property="acaId" column="aca_id"/>-->
<!--        <result property="acaName" column="aca_name"/>-->
<!--        <result property="acaPic" column="aca_pic"/>-->
<!--        <result property="address" column="address"/>-->
<!--        <result property="acaPhone" column="aca_phone"/>-->
<!--        <result property="teacherNum" column="teacher_num"/>-->
<!--        <result property="comments" column="comment"/>-->
<!--        <result property="star" column="star"/>-->
<!--        <result property="reviewCount" column="reviewCount"/>-->
<!--        <result property="likeCount" column="likeCount"/>-->
<!--        <result property="isLiked" column="isLiked"/>-->
<!--        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>-->

<!--        &lt;!&ndash; 클래스 정보 매핑 (하위 리스트) &ndash;&gt;-->
<!--        <collection property="classes" ofType="com.green.acamatch.academy.model.HB.GetAcademyDetailClassDto">-->
<!--            <id property="classId" column="classId"/>-->
<!--            <result property="className" column="className"/>-->
<!--            <result property="classComment" column="classComment"/>-->
<!--            <result property="classStartDate" column="classStartDate"/>-->
<!--            <result property="classEndDate" column="classEndDate"/>-->
<!--            <result property="classStartTime" column="classStartTime"/>-->
<!--            <result property="classEndTime" column="classEndTime"/>-->
<!--            <result property="classPrice" column="classPrice"/>-->
<!--            <result property="classDay" column="classDay"/>-->
<!--            <result property="classCategoryName" column="classCategoryName"/>-->
<!--            <result property="userCertification" column="userCertification"/>-->
<!--        </collection>-->

<!--        &lt;!&ndash; 리뷰 정보 매핑 (하위 리스트) &ndash;&gt;-->
<!--        <collection property="reviews" ofType="com.green.acamatch.academy.model.HB.ReviewDto">-->
<!--            <result property="comment" column="reviewComment"/>-->
<!--            <result property="star" column="reviewStar"/>-->
<!--            <result property="reviewId" column="reviewId"/>-->
<!--            <result property="createdAt" column="reviewCreatedAt"/>-->
<!--            <result property="userId" column="reviewUserId"/>-->
<!--            <result property="nickName" column="reviewUserNickName"/>-->
<!--            <result property="className" column="reviewClassName"/>-->
<!--        </collection>-->
<!--    </resultMap>-->

<!--    <select id="getAcademyWithClasses" resultMap="AcademyResultMap">-->
<!--        WITH LatestReviews AS (-->
<!--        SELECT-->
<!--        A.comment AS reviewComment,-->
<!--        A.star AS reviewStar,-->
<!--        A.created_at AS reviewCreatedAt,-->
<!--        A.review_id AS reviewId,-->
<!--        B.user_id AS reviewUserId,-->
<!--        D.nick_name AS reviewUserNickName,-->
<!--        C.class_name AS reviewClassName,-->
<!--        B.join_class_id AS reviewJoinClassId,-->
<!--        C.aca_id,-->
<!--        C.class_id-->
<!--        FROM review A-->
<!--        JOIN joinclass B ON A.join_class_id = B.join_class_id-->
<!--        JOIN class C ON B.class_id = C.class_id-->
<!--        JOIN user D ON B.user_id = D.user_id-->
<!--        WHERE C.aca_id = #{acaId}-->
<!--        ORDER BY A.review_id DESC-->
<!--        LIMIT #{startIdx}, #{size}-->
<!--        ),-->
<!--        ReviewStats AS (-->
<!--        SELECT-->
<!--        C.class_id,-->
<!--        C.aca_id,  &#45;&#45; 학원 ID 추가-->
<!--        ROUND(AVG(A.star), 2) AS avgStar,  &#45;&#45; 클래스별 별점 평균-->
<!--        (SELECT COUNT(*) FROM review A1-->
<!--        JOIN joinclass B1 ON A1.join_class_id = B1.join_class_id-->
<!--        JOIN class C1 ON B1.class_id = C1.class_id-->
<!--        WHERE C1.aca_id = C.aca_id) AS reviewCount  &#45;&#45; 학원 전체 리뷰 개수-->
<!--        FROM review A-->
<!--        JOIN joinclass B ON A.join_class_id = B.join_class_id-->
<!--        JOIN class C ON B.class_id = C.class_id-->
<!--        GROUP BY C.aca_id  &#45;&#45; class_id 기준으로 그룹화-->
<!--        ),-->

<!--        AcademyClass AS (-->
<!--        SELECT-->
<!--        C.class_id AS classId,-->
<!--        C.class_name AS className,-->
<!--        C.class_comment AS classComment,-->
<!--        C.start_date AS classStartDate,-->
<!--        C.end_date AS classEndDate,-->
<!--        C.start_time AS classStartTime,-->
<!--        C.end_time AS classEndTime,-->
<!--        C.price AS classPrice,-->
<!--        GROUP_CONCAT(DISTINCT W.`day` ORDER BY W.`day_id` ASC SEPARATOR ', ') AS classDay,  &#45;&#45; 요일 리스트-->
<!--        GROUP_CONCAT(DISTINCT CAT.category_name ORDER BY CAT.category_name ASC SEPARATOR ', ') AS classCategoryName,-->
<!--        C.aca_id-->
<!--        FROM class C-->
<!--        LEFT JOIN classweekdays CW ON C.class_id = CW.class_id-->
<!--        LEFT JOIN weekdays W ON CW.day_id = W.day_id-->
<!--        LEFT JOIN classcategory CC ON C.class_id = CC.class_id-->
<!--        LEFT JOIN category CAT ON CC.category_id = CAT.category_id-->
<!--        GROUP BY C.class_id-->
<!--        ),-->
<!--        UserCertification AS (-->
<!--        SELECT-->
<!--        JC.class_id,-->
<!--        CASE-->
<!--        WHEN COUNT(JC.join_class_id) > 0 THEN 1-->
<!--        ELSE 0-->
<!--        END AS isCertified-->
<!--        FROM joinclass JC-->
<!--        WHERE JC.user_id = #{signedUserId}  &#45;&#45; 특정 유저 ID-->
<!--        GROUP BY JC.class_id-->
<!--        ),-->
<!--        UserLikes AS (-->
<!--        SELECT-->
<!--        L.aca_id,-->
<!--        1 AS isLiked-->
<!--        FROM `like` L-->
<!--        WHERE L.user_id = #{signedUserId}-->
<!--        ),-->
<!--        LikeCount AS (-->
<!--        SELECT-->
<!--        aca_id,-->
<!--        COUNT(*) AS likeCount-->
<!--        FROM `like`-->
<!--        GROUP BY aca_id-->
<!--        ),-->
<!--        AcademyTag AS (-->
<!--        SELECT-->
<!--        AT.aca_id,-->
<!--        GROUP_CONCAT(DISTINCT T.tag_name ORDER BY T.tag_name ASC SEPARATOR ', ') AS tagName-->
<!--        FROM academytag AS AT-->
<!--        JOIN tag AS T-->
<!--        ON AT.tag_id = T.tag_id-->
<!--        GROUP BY AT.aca_id-->
<!--        )-->
<!--        SELECT-->
<!--        A.aca_id,-->
<!--        A.aca_name,-->
<!--        A.address,-->
<!--        A.aca_phone,-->
<!--        A.teacher_num,-->
<!--        A.comment,-->
<!--        A.aca_pic,-->

<!--        AT.tagName,-->

<!--        &#45;&#45; 클래스별 정보-->
<!--        AC.classId,-->
<!--        AC.className,-->
<!--        AC.classComment,-->
<!--        AC.classStartDate,-->
<!--        AC.classEndDate,-->
<!--        AC.classStartTime,-->
<!--        AC.classEndTime,-->
<!--        AC.classPrice,-->
<!--        AC.classDay,-->
<!--        AC.classCategoryName,-->

<!--        &#45;&#45; 학원별 총 좋아요 수-->
<!--        COALESCE(LC.likeCount, 0) AS likeCount,-->

<!--        &#45;&#45; 클래스별 평균 별점 및 리뷰 개수-->
<!--        COALESCE(RS.avgStar, 0) AS star,-->
<!--        COALESCE(RS.reviewCount, 0) AS reviewCount,-->

<!--        &#45;&#45; 해당 유저의 클래스별 수강 여부-->
<!--        COALESCE(UC.isCertified, 0) AS userCertification,-->

<!--        &#45;&#45; 해당 유저의 좋아요 여부 (학원 또는 클래스에 대한 좋아요)-->
<!--        COALESCE(UL.isLiked, 0) AS isLiked,-->

<!--        &#45;&#45; 최신 리뷰 정보 (클래스별로)-->
<!--        R.reviewComment,-->
<!--        R.reviewStar,-->
<!--        R.reviewCreatedAt,-->
<!--        R.reviewId,-->
<!--        R.reviewUserId,-->
<!--        R.reviewUserNickName,-->
<!--        R.reviewClassName,-->
<!--        R.reviewJoinClassId-->

<!--        FROM academy A-->
<!--        JOIN AcademyClass AC ON AC.aca_id = A.aca_id  &#45;&#45; 학원의 모든 클래스 JOIN-->
<!--        LEFT JOIN LatestReviews R ON R.class_id = AC.classId  &#45;&#45; 클래스별 최신 리뷰 1개만 선택-->
<!--        LEFT JOIN ReviewStats RS ON RS.aca_id = AC.aca_id  &#45;&#45; 클래스별 별점 평균 및 리뷰 개수-->
<!--        LEFT JOIN UserCertification UC ON UC.class_id = AC.classId  &#45;&#45; 유저의 클래스별 수강 여부-->
<!--        LEFT JOIN AcademyTag AT ON A.aca_id = AT.aca_id-->
<!--        LEFT JOIN UserLikes UL ON UL.aca_id = A.aca_id-->
<!--        LEFT JOIN LikeCount LC ON LC.aca_id = A.aca_id-->
<!--        WHERE A.aca_id = #{acaId}-->
<!--        ORDER BY R.reviewId DESC;-->
<!--    </select>-->

    <resultMap id="AcademyResultMap" type="com.green.acamatch.academy.model.HB.GetAcademyDetailRes">
        <!-- 학원 정보 매핑 -->
        <id property="acaId" column="aca_id"/>
        <result property="acaName" column="aca_name"/>
        <result property="acaPic" column="aca_pic"/>
        <result property="address" column="address"/>
        <result property="acaPhone" column="aca_phone"/>
        <result property="teacherNum" column="teacher_num"/>
        <result property="comments" column="comment"/>
        <result property="star" column="star"/>
        <result property="reviewCount" column="reviewCount"/>
        <result property="likeCount" column="likeCount"/>
        <result property="isLiked" column="isLiked"/>
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
        <!-- 클래스 정보 매핑 (하위 리스트) -->
        <collection property="classes" ofType="com.green.acamatch.academy.model.HB.GetAcademyDetailClassDto" javaType="ArrayList" notNullColumn="classId">
            <id property="classId" column="classId"/>
            <result property="className" column="className"/>
            <result property="classComment" column="classComment"/>
            <result property="classStartDate" column="classStartDate"/>
            <result property="classEndDate" column="classEndDate"/>
            <result property="classStartTime" column="classStartTime"/>
            <result property="classEndTime" column="classEndTime"/>
            <result property="classPrice" column="classPrice"/>
            <result property="classDay" column="classDay"/>
            <result property="classCategoryName" column="classCategoryName"/>
            <result property="userCertification" column="userCertification"/>
        </collection>
        <!-- 리뷰 정보 매핑 (하위 리스트) -->
        <collection property="reviews" ofType="com.green.acamatch.academy.model.HB.ReviewDto" javaType="ArrayList" notNullColumn="reviewId">
            <result property="comment" column="reviewComment"/>
            <result property="star" column="reviewStar"/>
            <result property="reviewId" column="reviewId"/>
            <result property="createdAt" column="reviewCreatedAt"/>
            <result property="userId" column="reviewUserId"/>
            <result property="nickName" column="reviewUserNickName"/>
            <result property="className" column="reviewClassName"/>
        </collection>
    </resultMap>
    <select id="getAcademyWithClasses" resultMap="AcademyResultMap">
        WITH LatestReviews AS (
        SELECT
        A.comment AS reviewComment,
        A.star AS reviewStar,
        A.created_at AS reviewCreatedAt,
        A.review_id AS reviewId,
        B.user_id AS reviewUserId,
        D.nick_name AS reviewUserNickName,
        C.class_name AS reviewClassName,
        B.join_class_id AS reviewJoinClassId,
        C.aca_id,
        C.class_id
        FROM review A
        JOIN joinclass B ON A.join_class_id = B.join_class_id
        JOIN class C ON B.class_id = C.class_id
        JOIN user D ON B.user_id = D.user_id
        WHERE C.aca_id = #{acaId}
        ORDER BY A.review_id DESC
        LIMIT #{startIdx}, #{size}
        ),
        ReviewStats AS (
        SELECT
        C.class_id,
        C.aca_id,  -- 학원 ID 추가
        ROUND(AVG(A.star), 2) AS avgStar,  -- 클래스별 별점 평균
        (SELECT COUNT(*) FROM review A1
        JOIN joinclass B1 ON A1.join_class_id = B1.join_class_id
        JOIN class C1 ON B1.class_id = C1.class_id
        WHERE C1.aca_id = C.aca_id) AS reviewCount  -- 학원 전체 리뷰 개수
        FROM review A
        JOIN joinclass B ON A.join_class_id = B.join_class_id
        JOIN class C ON B.class_id = C.class_id
        GROUP BY C.class_id, C.aca_id  -- class_id 기준으로 그룹화
        ),
        AcademyClass AS (
        SELECT
        C.class_id AS classId,
        C.class_name AS className,
        C.class_comment AS classComment,
        C.start_date AS classStartDate,
        C.end_date AS classEndDate,
        C.start_time AS classStartTime,
        C.end_time AS classEndTime,
        C.price AS classPrice,
        GROUP_CONCAT(DISTINCT W.`day` ORDER BY W.`day_id` ASC SEPARATOR ', ') AS classDay,  -- 요일 리스트
        GROUP_CONCAT(DISTINCT CAT.category_name ORDER BY CAT.category_name ASC SEPARATOR ', ') AS classCategoryName,
        C.aca_id
        FROM class C
        LEFT JOIN classweekdays CW ON C.class_id = CW.class_id
        LEFT JOIN weekdays W ON CW.day_id = W.day_id
        LEFT JOIN classcategory CC ON C.class_id = CC.class_id
        LEFT JOIN category CAT ON CC.category_id = CAT.category_id
        GROUP BY C.class_id
        ),
        UserCertification AS (
        SELECT
        JC.class_id,
        CASE
        WHEN COUNT(JC.join_class_id) > 0 THEN 1
        ELSE 0
        END AS isCertified
        FROM joinclass JC
        WHERE JC.user_id = #{signedUserId}  -- 특정 유저 ID
        GROUP BY JC.class_id
        ),
        UserLikes AS (
        SELECT
        L.aca_id,
        1 AS isLiked
        FROM `like` L
        WHERE L.user_id = #{signedUserId}
        ),
        LikeCount AS (
        SELECT
        aca_id,
        COUNT(*) AS likeCount
        FROM `like`
        GROUP BY aca_id
        ),
        AcademyTag AS (
        SELECT
        AT.aca_id,
        GROUP_CONCAT(DISTINCT T.tag_name ORDER BY T.tag_name ASC SEPARATOR ', ') AS tagName
        FROM academytag AS AT
        JOIN tag AS T
        ON AT.tag_id = T.tag_id
        GROUP BY AT.aca_id
        )
        SELECT
        A.aca_id,
        A.aca_name,
        A.address,
        A.aca_phone,
        A.teacher_num,
        A.comment,
        A.aca_pic,
        AT.tagName,

        -- 클래스별 정보 (클래스가 없으면 NULL 대신 기본값)
        COALESCE(AC.classId, 0) AS classId,
        COALESCE(AC.className, '') AS className,
        COALESCE(AC.classComment, '') AS classComment,
        COALESCE(AC.classStartDate, '') AS classStartDate,
        COALESCE(AC.classEndDate, '') AS classEndDate,
        COALESCE(AC.classStartTime, '') AS classStartTime,
        COALESCE(AC.classEndTime, '') AS classEndTime,
        COALESCE(AC.classPrice, 0) AS classPrice,
        COALESCE(AC.classDay, '') AS classDay,
        COALESCE(AC.classCategoryName, '') AS classCategoryName,

        -- 학원별 총 좋아요 수
        COALESCE(LC.likeCount, 0) AS likeCount,

        -- 클래스별 평균 별점 및 리뷰 개수
        COALESCE(RS.avgStar, 0) AS star,
        COALESCE(RS.reviewCount, 0) AS reviewCount,

        -- 해당 유저의 클래스별 수강 여부
        COALESCE(UC.isCertified, 0) AS userCertification,

        -- 해당 유저의 좋아요 여부 (학원 또는 클래스에 대한 좋아요)
        COALESCE(UL.isLiked, 0) AS isLiked,

        -- 최신 리뷰 정보 (클래스별로)
        COALESCE(R.reviewComment, '') AS reviewComment,
        COALESCE(R.reviewStar, 0) AS reviewStar,
        COALESCE(R.reviewCreatedAt, '') AS reviewCreatedAt,
        R.reviewId AS reviewId,   -- reviewId가 NULL이면 0으로 설정
        COALESCE(R.reviewUserId, 0) AS reviewUserId,
        COALESCE(R.reviewUserNickName, '') AS reviewUserNickName,
        COALESCE(R.reviewClassName, '') AS reviewClassName


        FROM academy A
        LEFT JOIN AcademyClass AC ON AC.aca_id = A.aca_id  -- 학원의 모든 클래스 JOIN
        LEFT JOIN LatestReviews R ON R.class_id = AC.classId  -- 클래스별 최신 리뷰 1개만 선택
        LEFT JOIN ReviewStats RS ON RS.class_id = AC.classId  -- 클래스별 별점 평균 및 리뷰 개수
        LEFT JOIN UserCertification UC ON UC.class_id = AC.classId  -- 유저의 클래스별 수강 여부
        LEFT JOIN AcademyTag AT ON A.aca_id = AT.aca_id
        LEFT JOIN UserLikes UL ON UL.aca_id = A.aca_id
        LEFT JOIN LikeCount LC ON LC.aca_id = A.aca_id
        WHERE A.aca_id = #{acaId}
        ORDER BY R.reviewId DESC;
    </select>

    <resultMap id="randomResultMap" type = "com.green.acamatch.academy.model.HB.GetAcademyRandomRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="starAvg" column="starAvg" />
        <result property="likeCount" column="likeCount" />
        <result property="reviewCount" column="reviewCount" />
        <result property="tagNames" column="tagNames" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>

    <select id="getAcademyListRandom" resultMap="randomResultMap">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        COUNT(L.aca_id) AS likeCount,
        COALESCE(G.star, 0) AS starAvg,
        COALESCE(G.reviewCount, 0) AS reviewCount,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagNames
        FROM academy A
        LEFT JOIN `like` L
        ON A.aca_id = L.aca_id
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        C.aca_id,
        ROUND(AVG(R.star), 2) AS star,
        COUNT(DISTINCT R.join_class_id) AS reviewCount
        FROM review R
        JOIN joinclass JC
        ON JC.join_class_id = R.join_class_id
        JOIN class C
        ON JC.class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        GROUP BY A.aca_id
        ORDER BY RAND()
        LIMIT 0, 5
    </select>

    <select id="getAcademyListByStudent">
        SELECT DISTINCT
        A.aca_id,
        A.aca_pic,
        A.aca_name,
        JC.registration_date
        FROM academy A
        JOIN class C ON A.aca_id = C.aca_id
        JOIN joinclass JC ON C.class_id = JC.class_id
        WHERE JC.user_id = #{signedUserId}
        ORDER BY A.aca_name ASC
        LIMIT #{startIdx}, #{size}
    </select>

    <select id="popularSearch">
        SELECT
        T.tag_name,
        COUNT(S.tag_id) AS tag_count
        FROM search S
        JOIN tag T ON S.tag_id = T.tag_id
        GROUP BY T.tag_name
        ORDER BY tag_count DESC
        LIMIT 0 ,10;
    </select>

    <resultMap id="Default" type = "com.green.acamatch.academy.model.HB.GetDefaultRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>

    <select id="getDefault" resultMap="Default">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star,
        COUNT(*) OVER() AS totalCount
        FROM academy A
        LEFT JOIN academytag E ON A.aca_id = E.aca_id
        LEFT JOIN tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C ON R.join_class_id = C.class_id
        GROUP BY C.aca_id ) G ON G.aca_id = A.aca_id
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT 0, 10;
    </select>
    <select id="GetAcademyCount">
        SELECT COUNT(A.aca_id) AS academyCount, COUNT(U.user_id) AS userCount
        FROM academy A
        RIGHT JOIN user U
        ON A.user_id = U.user_id
    </select>
</mapper>
