<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.acamatch.academy.mapper.AcademyMapper">


<!--태그 select-->
    <select id="selTagDtoList">
        SELECT tag_id as tagId,tag_name as tagName
        FROM tag
        <where>
            <if test="searchTag != null and searchTag != ''">
                tag_name LIKE CONCAT('%', #{searchTag}, '%')
            </if>
        </where>
    </select>


<!--태그 학원등록-->
    <insert id="insAcaTag">
        INSERT INTO academytag (aca_id, tag_id)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{acaId}, #{tagId})
        </foreach>
    </insert>

<!--학원 주소 동pk 뽑아내기-->
    <select id="selAddressDong">
        SELECT dong_id
        FROM dong
        WHERE dong_name LIKE CONCAT('%', #{dongName}, '%');
    </select>


<!--학원정보등록-->
    <insert id="insAcademy" useGeneratedKeys="true" keyProperty="acaId">
        INSERT INTO academy
           SET user_id = #{userId}
             , dong_id = #{dongId}
             , aca_name = #{acaName}
             , aca_phone = #{acaPhone}
             , comment = #{comment}
             , teacher_num = #{teacherNum}
             , open_time = #{openTime}
             , close_time = #{closeTime}
             , address = #{address}
             , aca_pic = #{acaPic}
    </insert>


<!--학원정보수정-->
    <update id="updAcademy">
        UPDATE academy
        <set>
            <if test="acaName != null and acaName != ''">
                aca_name = #{acaName}
            </if>
            <if test="acaPhone != null and acaPhone != ''">
                , aca_phone = #{acaPhone}
            </if>
            <if test="comment != null and comment != ''">
                , comment = #{comment}
            </if>
            <if test="teacherNum != null and teacherNum != ''">
                , teacher_num = #{teacherNum}
            </if>
            <if test="openTime != null and openTime != ''">
                , open_time = #{openTime}
            </if>
            <if test="closeTime != null and closeTime != ''">
                , close_time = #{closeTime}
            </if>
            <if test="acaPic != null and acaPic != ''">
                , aca_pic = #{acaPic}
            </if>
            <if test="address != null and address != ''">
                , address = #{address}
            </if>
        </set>
        WHERE aca_id = #{acaId}
        AND user_id = #{userId}
    </update>


    <select id="getAcademyAddress">
        SELECT address
        FROM academy
        WHERE aca_id = #{acaId}
    </select>

<!--학원정보수정에서 태그수정을 위한 삭제처리-->
    <delete id="delAcaTag">
        DELETE FROM academytag
        WHERE aca_id = #{acaId}
    </delete>


<!--학원정보삭제-->
    <delete id="delAcademy">
        DELETE FROM academy
         WHERE aca_id = #{acaId}
           AND user_id = #{userId}
    </delete>

<!--학원 좋아요 순-->
    <select id="getAcademyBest" resultType="com.green.acamatch.academy.model.AcademyBestLikeGetRes">
        SELECT aca_id AS acaId, COUNT(aca_id) AS likeCount
          FROM `like`
         GROUP BY aca_id
         ORDER BY likeCount DESC
         LIMIT #{startIdx}, #{size}
    </select>

    <!-- 학원 검색 -->

    <resultMap id="searchResultMap" type = "com.green.acamatch.academy.model.GetAcademyRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler" />
    </resultMap>

    <select id="getAcademy" resultMap="searchResultMap">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_id IN (
        SELECT DISTINCT E.aca_id
        FROM academytag E
        JOIN tag F
        ON E.tag_id = F.tag_id
        WHERE F.tag_name LIKE CONCAT('%', #{tagName}, '%')
        )
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 학원 상세 정보 보기 -->
    <select id="getAcademyDetail">
        SELECT A.aca_id, A.aca_phone, A.aca_name, A.aca_pic, A.COMMENT, A.teacher_num, A.open_time, A.close_time, address
        FROM academy A
        WHERE aca_id = #{acaId}
    </select>

    <!-- 학원 태그 리스트 불러오기 -->
    <select id="getTagList">
        SELECT A.tag_id, A.tag_name
        FROM tag A
        JOIN academytag B
        ON A.tag_id = B.tag_id
        JOIN academy C
        ON B.aca_id = C.aca_id
        WHERE C.aca_id = #{acaId}
    </select>

    <!-- 검색어를 입력받아 태그 불러오기 -->
    <select id="getTagListBySearchName">
        SELECT tag_id AS tagId, tag_name AS tagName
        FROM tag
        WHERE tag_name LIKE CONCAT('%', #{tagName}, '%')
    </select>

    <!-- 검색어가 없을때 모든 태그 리스트 출력하기-->
    <select id="getAllTagList">
        SELECT tag_id, tag_name
        FROM tag
    </select>

    <!-- 카테고리로 필터링하기-->
    <select id="getCategorySearch">
        SELECT DISTINCT F.aca_name
        FROM categorytype A
        INNER JOIN category B ON A.category_type_id = B.category_type_id
        INNER JOIN classcategory D ON B.category_id = D.category_id
        INNER JOIN class E ON E.class_id = D.class_id
        INNER JOIN academy F ON E.aca_id = F.aca_id
        WHERE B.category_name IN (#{categoryName})
        AND EXISTS (
        SELECT 1
        FROM category B2
        INNER JOIN classcategory D2 ON B2.category_id = D2.category_id
        WHERE B2.category_name IN (#{categoryName})
        AND D2.class_id = E.class_id
        )
    </select>

    <!-- 검색시에 search 테이블에 post-->
    <insert id="postSearch" useGeneratedKeys="true" keyProperty="searchId">
        insert into search
        set tag_id = #{tagId}
    </insert>

    <!-- 도시 리스트 불러오기-->
    <select id="getCity">
        SELECT city_id, city_name
        FROM city
    </select>

    <!-- 시/군/구 리스트 불러오기-->
    <select id="getStreet">
        SELECT street_id, street_name
        FROM street
        WHERE city_id = #{cityId}
    </select>

    <!-- 동 리스트 불러오기-->
    <select id="getDong">
        SELECT A.dong_id, A.dong_name
        FROM dong A
        JOIN street B
        ON A.street_id = B.street_id
        WHERE B.street_id = #{streetId}
        AND city_id = #{cityId};
    </select>

    <!-- 동까지만 입력받아 학원 리스트 불러오기-->
    <select id = "getAcademyListByDong">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 검색어 입력받아서 학원 검색하기-->
    <select id="getAcademyListBySearchName">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_name like concat ('%', #{searchName}, '%')
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size}
    </select>

    <!-- 검색어만 입력받아 학원 리스트 출력하기-->
    <select id="getAcademyByOnlySearchName">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        A.aca_pic AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        LEFT JOIN academytag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.aca_name like concat ('%', #{searchName}, '%')
        GROUP BY A.aca_id
        ORDER BY A.aca_id ASC
        LIMIT #{startIdx}, #{size}
    </select>

    <!-- 학원 관리자가 본인이 등록한 학원 리스트 보기-->
    <select id="getAcademyListByUserId">
        SELECT A.aca_id, A.aca_name, A.created_at
        FROM academy A
        WHERE user_id = #{signedUserId}
    </select>
</mapper>
