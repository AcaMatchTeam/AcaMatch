<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper
        PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
        "https://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="com.green.acamatch.academy.mapper.AcademyMapper">


    <!--태그 select-->
    <select id="selTagDtoList">
        SELECT tag_id as tagId,tag_name as tagName
        FROM tag
        <where>
            <if test="searchTag != null and searchTag != ''">
                tag_name LIKE CONCAT('%', #{searchTag}, '%')
            </if>
        </where>
    </select>


    <!--태그 학원등록-->
    <insert id="insAcaTag">
        INSERT INTO academy_tag (aca_id, tag_id)
        VALUES
        <foreach collection="tagIdList" item="tagId" separator=",">
            (#{acaId}, #{tagId})
        </foreach>
    </insert>

    <!--학원 주소 시pk 뽑아내기-->
    <select id="selAddressCity">
        SELECT city_id
        FROM city
        WHERE city_name LIKE CONCAT('%', #{cityName}, '%')
    </select>


    <!--학원 주소 구pk 뽑아내기-->
    <select id="selAddressStreet">
        SELECT street_id
        FROM street
        WHERE street_name = #{streetName}
        AND city_id = #{cityId}
    </select>

    <!--학원 주소 동pk 뽑아내기-->
    <select id="selAddressDong">
        SELECT dong_id
        FROM dong
        WHERE dong_name = #{dongName}
        AND street_id = #{streetId}
    </select>

    <!--학원 사진 여러장 삽입-->
    <insert id="insAcademyPics">
        INSERT INTO academy (aca_id, aca_pic)
        VALUES
        <foreach collection="picNameList" item="acaPic" separator=",">
            (#{acaId}, #{acaPic})
        </foreach>
    </insert>


    <!--학원정보등록-->
    <insert id="insAcademy" useGeneratedKeys="true" keyProperty="acaId">
        INSERT INTO academy
        SET user_id = #{userId}
        , dong_id = #{dongId}
        , aca_name = #{acaName}
        , aca_phone = #{acaPhone}
        , comment = #{comment}
        , teacher_num = #{teacherNum}
        , open_time = #{openTime}
        , close_time = #{closeTime}
        , address = #{address}
        , aca_pic = #{acaPic}
    </insert>


    <!--학원정보수정-->
    <update id="updAcademy">
        UPDATE academy
        <set>
            <if test="dongId != '' and dongId != null">
                dong_id = #{dongId}
            </if>
            <if test="acaName != null and acaName != ''">
                , aca_name = #{acaName}
            </if>
            <if test="acaPhone != null and acaPhone != ''">
                , aca_phone = #{acaPhone}
            </if>
            <if test="comment != null and comment != ''">
                , comment = #{comment}
            </if>
            <if test="teacherNum != null and teacherNum != ''">
                , teacher_num = #{teacherNum}
            </if>
            <if test="openTime != null and openTime != ''" >
                , open_time = #{openTime}
            </if>
            <if test="closeTime != null and closeTime != ''">
                , close_time = #{closeTime}
            </if>
            <if test="acaPic != null">
                , aca_pic = #{acaPic}
            </if>
            <if test="address != null and address != ''">
                , address = #{address}
            </if>

        </set>
        WHERE aca_id = #{acaId}
        AND user_id = #{userId}
    </update>


    <!-- db에 주소 뽑아내기-->
    <select id="getAcademyAddress">
        SELECT address
        FROM academy
        WHERE aca_id = #{acaId}
    </select>

    <!--학원정보수정에서 태그수정을 위한 삭제처리-->
    <delete id="delAcaTag">
        DELETE FROM academy_tag
        WHERE aca_id = #{acaId}
    </delete>


    <!--학원정보삭제-->
    <delete id="delAcademy">
        DELETE FROM academy
        WHERE aca_id = #{acaId}
        AND user_id = #{userId}
    </delete>

    <!--학원 좋아요 순-->
    <select id="getAcademyBest" resultType="com.green.acamatch.academy.model.JW.AcademyBestLikeGetRes">
        SELECT a.aca_id,
        COUNT(DISTINCT a.user_id) AS like_count,
        b.aca_name, AP.aca_pic,
        GROUP_CONCAT(DISTINCT c.tag_id ORDER BY c.tag_id ASC) AS tag_ids,
        GROUP_CONCAT(DISTINCT g.tag_name ORDER BY c.tag_id ASC) AS tag_names,
        ifnull(AVG(f.star), 0) AS star_avg,
        COUNT(DISTINCT f.`comment`) AS review_count
        FROM `likes` a
        LEFT JOIN `academy` b
        ON a.aca_id = b.aca_id
        LEFT JOIN `academy_pic` AP
        ON b.aca_id = AP.aca_id
        LEFT JOIN `academy_tag` c
        ON a.aca_id = c.aca_id
        LEFT JOIN `aca_class` d
        ON b.aca_id = d.aca_id
        LEFT JOIN `join_class` e
        ON d.class_id = e.class_id
        LEFT JOIN `review` f
        ON e.join_class_id = f.join_class_id
        LEFT JOIN `tag` g
        ON c.tag_id = g.tag_id
        WHERE b.aca_agree = 1
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        GROUP BY a.aca_id
        ORDER BY like_count DESC
        LIMIT #{startIdx}, #{size}
    </select>

    <select id="selAcademyCount">
        SELECT COUNT(aca_id) AS academy_count
        FROM academy
    </select>

    <select id="selAcademyLikeCount">
        SELECT COUNT(DISTINCT a.aca_id) AS academy_like_count
        FROM `likes` a
    </select>
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!-- ㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡㅡ-->
    <!-- 학원 검색 -->

    <resultMap id="searchResultMap" type = "com.green.acamatch.academy.model.HB.GetAcademyListRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>


    <select id="getAcademy" >
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        AP. AS acaPic,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star
        FROM academy A
        JOIN academy_pic AP
        ON A.aca_id = AP.aca_id
        LEFT JOIN academy_tag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN aca_class C
        ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.dong_id = #{dongId}
        AND A.aca_id IN (
        SELECT DISTINCT E.aca_id
        FROM academy_tag E
        JOIN tag F
        ON E.tag_id = F.tag_id
        WHERE F.tag_name LIKE CONCAT('%', #{tagName}, '%')
        )
        GROUP BY A.aca_id
        ORDER BY G.star DESC
        LIMIT #{startIdx}, #{size};
    </select>

    <!-- 학원 상세 정보 보기 -->
    <resultMap id="AcademyDetail" type="com.green.acamatch.academy.model.HB.GetAcademyDetail">
    <id property="acaId" column="aca_id"/>
        <result property="acaPhone" column="aca_phone"/>
        <result property="acaName" column="aca_name"/>
        <result property="acaPic" column="aca_pic"/>
        <result property="comment" column="comment"/>
        <result property="teacherNum" column="teacher_num"/>
        <result property="address" column="address"/>
        <result property="detailAddress" column="detail_address"/>
        <result property="postNum" column="post_num"/>
        <result property="openTime" column="open_time"/>
        <result property="closeTime" column="close_time"/>
        <result property="businessNumber" column="business_number"/>
            <association property="addressDto" javaType="com.green.acamatch.academy.model.AddressDto">
                <result property="address" column="address"/>
                <result property="detailAddress" column="detail_address"/>
                <result property="postNum" column="post_num"/>
            </association>
    </resultMap>
    <select id="getAcademyDetail" resultMap="AcademyDetail">
        SELECT A.aca_id, A.aca_phone, A.aca_name,
        GROUP_CONCAT(AP.aca_pic ORDER BY AP.aca_pic SEPARATOR ', ') AS aca_pic,
        A.comment, A.teacher_num, A.open_time, A.close_time,
        A.address, A.detail_address, A.post_num, A.business_number
        FROM academy A
        JOIN academy_pic AP
        ON A.aca_id = AP.aca_id
        WHERE A.aca_id = #{acaId}
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        )
    </select>

    <!-- 학원 태그 리스트 불러오기 -->
    <select id="getTagList">
        SELECT A.tag_id, A.tag_name
        FROM tag A
        JOIN academy_tag B
        ON A.tag_id = B.tag_id
        JOIN academy C
        ON B.aca_id = C.aca_id
        WHERE C.aca_id = #{acaId}
    </select>

    <!-- 검색어를 입력받아 태그 불러오기 -->
    <select id="getTagListBySearchName">
        SELECT tag_id AS tagId, tag_name AS tagName
        FROM tag
        WHERE tag_name LIKE CONCAT('%', #{tagName}, '%')
        ORDER BY tag_id
    </select>

    <!-- 검색어가 없을때 모든 태그 리스트 출력하기-->
    <select id="getAllTagList">
        SELECT tag_id, tag_name
        FROM tag
        ORDER BY tag_id
    </select>

    <!-- 검색시에 search 테이블에 post-->
    <insert id="postSearch" useGeneratedKeys="true" keyProperty="searchId">
        insert into search
        set tag_id = #{tagId}
    </insert>

    <!-- 학원 관리자가 본인이 등록한 학원 리스트 보기-->
    <select id="getAcademyListByUserId">
        SELECT
        A.aca_id,
        A.aca_name,
        A.created_at,
        A.aca_agree,
        A.comment,
        A.aca_phone,
        A.address,
        U.name,
        AP.aca_pic,
        GROUP_CONCAT(AP.aca_pic ORDER BY AP.aca_pic SEPARATOR ', ') AS aca_pics,
        IFNULL(RC.reportsCount, 0) AS reportsCount  -- 신고 수가 없으면 0으로 처리
        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        JOIN User U ON A.user_id = U.user_id
        LEFT JOIN (
        SELECT R.aca_id, COUNT(R.report_id) AS reportsCount
        FROM reports R
        GROUP BY R.aca_id
        ) RC ON A.aca_id = RC.aca_id  -- 학원별 신고 개수를 LEFT JOIN
        WHERE A.user_id = #{signedUserId}
        GROUP BY A.aca_id;
    </select>

    <!-- 모든 입력을 받고 학원 리스트 불러오기-->
    <select id="getAcademyListByAll" resultMap="searchResultMap">
        WITH filtered_academies AS (
        -- ✅ 기존 필터링된 학원 목록 (동, 검색어, 태그, 카테고리 적용)
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        AP.aca_pic AS acaPic,
        A.premium,
        GROUP_CONCAT(AP.aca_pic ORDER BY AP.aca_pic SEPARATOR ', ') AS aca_pics,
        A.address AS address,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star,
        RAND() AS rand_order
        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        LEFT JOIN academy_tag E ON A.aca_id = E.aca_id
        LEFT JOIN tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN join_class JC ON R.join_class_id = JC.join_class_id
        JOIN aca_class C ON JC.class_id = C.class_id
        GROUP BY C.aca_id
        ) G ON G.aca_id = A.aca_id
        WHERE 1 = 1
        AND A.aca_agree = 1
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        AND (#{dongId} IS NULL OR A.dong_id = #{dongId})
        AND (#{searchName} IS NULL OR A.aca_name LIKE CONCAT('%', #{searchName}, '%'))
        <if test="tagName != null and tagName != ''">
            AND EXISTS (
            SELECT 1 FROM academy_tag E2
            JOIN tag F2 ON E2.tag_id = F2.tag_id
            WHERE E2.aca_id = A.aca_id
            <foreach collection="tagName.split(',')" item="tag" open="AND (" separator="OR" close=")">
                F2.tag_name LIKE CONCAT('%', #{tag}, '%')
            </foreach>
            )
        </if>
        <if test=" categoryIds != null and categoryIds != '' ">
            AND ( A.aca_id IN
            (SELECT CL.aca_id FROM aca_class CL
            JOIN class_category CC ON CL.class_id = CC.class_id
            WHERE CC.category_id IN
            <foreach collection="categoryIds" item="CId" open="(" close=")" separator=",">
                1
            </foreach>
            ))
        </if>
        GROUP BY A.aca_id
        )
        -- ✅ 프리미엄 학원 상위 3개, 그 아래 일반 학원 정렬
        SELECT *, (SELECT COUNT(*) FROM filtered_academies) AS totalCount
        FROM (
        (SELECT * FROM filtered_academies WHERE premium = 1 ORDER BY RAND() LIMIT 0, #{premiumLimit})
        UNION ALL
        (SELECT * FROM filtered_academies WHERE premium = 0 ORDER BY star DESC)
        ) final_academies
        LIMIT #{startIdx}, #{size}
    </select>

    <insert id="postToSearch">
        INSERT INTO search
        SET tag_id =
        (SELECT tag_id
        FROM tag
        WHERE tag_name = #{tagName})
    </insert>

    <!--    <resultMap id="AcademyResultMap" type="com.green.acamatch.academy.model.HB.GetAcademyDetailRes">-->
    <!--        &lt;!&ndash; 학원 정보 매핑 &ndash;&gt;-->
    <!--        <id property="acaId" column="aca_id"/>-->
    <!--        <result property="acaName" column="aca_name"/>-->
    <!--        <result property="acaPic" column="aca_pic"/>-->
    <!--        <result property="address" column="address"/>-->
    <!--        <result property="acaPhone" column="aca_phone"/>-->
    <!--        <result property="teacherNum" column="teacher_num"/>-->
    <!--        <result property="comments" column="comment"/>-->
    <!--        <result property="star" column="star"/>-->
    <!--        <result property="reviewCount" column="reviewCount"/>-->
    <!--        <result property="likeCount" column="likeCount"/>-->
    <!--        <result property="isLiked" column="isLiked"/>-->
    <!--        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>-->

    <!--        &lt;!&ndash; 클래스 정보 매핑 (하위 리스트) &ndash;&gt;-->
    <!--        <collection property="classes" ofType="com.green.acamatch.academy.model.HB.GetAcademyDetailClassDto">-->
    <!--            <id property="classId" column="classId"/>-->
    <!--            <result property="className" column="className"/>-->
    <!--            <result property="classComment" column="classComment"/>-->
    <!--            <result property="classStartDate" column="classStartDate"/>-->
    <!--            <result property="classEndDate" column="classEndDate"/>-->
    <!--            <result property="classStartTime" column="classStartTime"/>-->
    <!--            <result property="classEndTime" column="classEndTime"/>-->
    <!--            <result property="classPrice" column="classPrice"/>-->
    <!--            <result property="classDay" column="classDay"/>-->
    <!--            <result property="classCategoryName" column="classCategoryName"/>-->
    <!--            <result property="userCertification" column="userCertification"/>-->
    <!--        </collection>-->

    <!--        &lt;!&ndash; 리뷰 정보 매핑 (하위 리스트) &ndash;&gt;-->
    <!--        <collection property="reviews" ofType="com.green.acamatch.academy.model.HB.ReviewDto">-->
    <!--            <result property="comment" column="reviewComment"/>-->
    <!--            <result property="star" column="reviewStar"/>-->
    <!--            <result property="reviewId" column="reviewId"/>-->
    <!--            <result property="createdAt" column="reviewCreatedAt"/>-->
    <!--            <result property="userId" column="reviewUserId"/>-->
    <!--            <result property="nickName" column="reviewUserNickName"/>-->
    <!--            <result property="className" column="reviewClassName"/>-->
    <!--        </collection>-->
    <!--    </resultMap>-->

    <!--    <select id="getAcademyWithClasses" resultMap="AcademyResultMap">-->
    <!--        WITH LatestReviews AS (-->
    <!--        SELECT-->
    <!--        A.comment AS reviewComment,-->
    <!--        A.star AS reviewStar,-->
    <!--        A.created_at AS reviewCreatedAt,-->
    <!--        A.review_id AS reviewId,-->
    <!--        B.user_id AS reviewUserId,-->
    <!--        D.nick_name AS reviewUserNickName,-->
    <!--        C.class_name AS reviewClassName,-->
    <!--        B.join_class_id AS reviewjoin_classId,-->
    <!--        C.aca_id,-->
    <!--        C.class_id-->
    <!--        FROM review A-->
    <!--        JOIN join_class B ON A.join_class_id = B.join_class_id-->
    <!--        JOIN aca_class C ON B.class_id = C.class_id-->
    <!--        JOIN user D ON B.user_id = D.user_id-->
    <!--        WHERE C.aca_id = #{acaId}-->
    <!--        ORDER BY A.review_id DESC-->
    <!--        LIMIT #{startIdx}, #{size}-->
    <!--        ),-->
    <!--        ReviewStats AS (-->
    <!--        SELECT-->
    <!--        C.class_id,-->
    <!--        C.aca_id,  &#45;&#45; 학원 ID 추가-->
    <!--        ROUND(AVG(A.star), 2) AS avgStar,  &#45;&#45; 클래스별 별점 평균-->
    <!--        (SELECT COUNT(*) FROM review A1-->
    <!--        JOIN join_class B1 ON A1.join_class_id = B1.join_class_id-->
    <!--        JOIN aca_class C1 ON B1.class_id = C1.class_id-->
    <!--        WHERE C1.aca_id = C.aca_id) AS reviewCount  &#45;&#45; 학원 전체 리뷰 개수-->
    <!--        FROM review A-->
    <!--        JOIN join_class B ON A.join_class_id = B.join_class_id-->
    <!--        JOIN aca_class C ON B.class_id = C.class_id-->
    <!--        GROUP BY C.aca_id  &#45;&#45; class_id 기준으로 그룹화-->
    <!--        ),-->

    <!--        AcademyClass AS (-->
    <!--        SELECT-->
    <!--        C.class_id AS classId,-->
    <!--        C.class_name AS className,-->
    <!--        C.class_comment AS classComment,-->
    <!--        C.start_date AS classStartDate,-->
    <!--        C.end_date AS classEndDate,-->
    <!--        C.start_time AS classStartTime,-->
    <!--        C.end_time AS classEndTime,-->
    <!--        C.price AS classPrice,-->
    <!--        GROUP_CONCAT(DISTINCT W.`day` ORDER BY W.`day_id` ASC SEPARATOR ', ') AS classDay,  &#45;&#45; 요일 리스트-->
    <!--        GROUP_CONCAT(DISTINCT CAT.category_name ORDER BY CAT.category_name ASC SEPARATOR ', ') AS classCategoryName,-->
    <!--        C.aca_id-->
    <!--        FROM aca_class C-->
    <!--        LEFT JOIN class_weekdays CW ON C.class_id = CW.class_id-->
    <!--        LEFT JOIN weekdays W ON CW.day_id = W.day_id-->
    <!--        LEFT JOIN classcategory CC ON C.class_id = CC.class_id-->
    <!--        LEFT JOIN category CAT ON CC.category_id = CAT.category_id-->
    <!--        GROUP BY C.class_id-->
    <!--        ),-->
    <!--        UserCertification AS (-->
    <!--        SELECT-->
    <!--        JC.class_id,-->
    <!--        CASE-->
    <!--        WHEN COUNT(JC.join_class_id) > 0 THEN 1-->
    <!--        ELSE 0-->
    <!--        END AS isCertified-->
    <!--        FROM join_class JC-->
    <!--        WHERE JC.user_id = #{signedUserId}  &#45;&#45; 특정 유저 ID-->
    <!--        GROUP BY JC.class_id-->
    <!--        ),-->
    <!--        UserLikes AS (-->
    <!--        SELECT-->
    <!--        L.aca_id,-->
    <!--        1 AS isLiked-->
    <!--        FROM `likes` L-->
    <!--        WHERE L.user_id = #{signedUserId}-->
    <!--        ),-->
    <!--        LikeCount AS (-->
    <!--        SELECT-->
    <!--        aca_id,-->
    <!--        COUNT(*) AS likeCount-->
    <!--        FROM `likes`-->
    <!--        GROUP BY aca_id-->
    <!--        ),-->
    <!--        academy_tag AS (-->
    <!--        SELECT-->
    <!--        AT.aca_id,-->
    <!--        GROUP_CONCAT(DISTINCT T.tag_name ORDER BY T.tag_name ASC SEPARATOR ', ') AS tagName-->
    <!--        FROM academytag AS AT-->
    <!--        JOIN tag AS T-->
    <!--        ON AT.tag_id = T.tag_id-->
    <!--        GROUP BY AT.aca_id-->
    <!--        )-->
    <!--        SELECT-->
    <!--        A.aca_id,-->
    <!--        A.aca_name,-->
    <!--        A.address,-->
    <!--        A.aca_phone,-->
    <!--        A.teacher_num,-->
    <!--        A.comment,-->
    <!--        A.aca_pic,-->

    <!--        AT.tagName,-->

    <!--        &#45;&#45; 클래스별 정보-->
    <!--        AC.classId,-->
    <!--        AC.className,-->
    <!--        AC.classComment,-->
    <!--        AC.classStartDate,-->
    <!--        AC.classEndDate,-->
    <!--        AC.classStartTime,-->
    <!--        AC.classEndTime,-->
    <!--        AC.classPrice,-->
    <!--        AC.classDay,-->
    <!--        AC.classCategoryName,-->

    <!--        &#45;&#45; 학원별 총 좋아요 수-->
    <!--        COALESCE(LC.likeCount, 0) AS likeCount,-->

    <!--        &#45;&#45; 클래스별 평균 별점 및 리뷰 개수-->
    <!--        COALESCE(RS.avgStar, 0) AS star,-->
    <!--        COALESCE(RS.reviewCount, 0) AS reviewCount,-->

    <!--        &#45;&#45; 해당 유저의 클래스별 수강 여부-->
    <!--        COALESCE(UC.isCertified, 0) AS userCertification,-->

    <!--        &#45;&#45; 해당 유저의 좋아요 여부 (학원 또는 클래스에 대한 좋아요)-->
    <!--        COALESCE(UL.isLiked, 0) AS isLiked,-->

    <!--        &#45;&#45; 최신 리뷰 정보 (클래스별로)-->
    <!--        R.reviewComment,-->
    <!--        R.reviewStar,-->
    <!--        R.reviewCreatedAt,-->
    <!--        R.reviewId,-->
    <!--        R.reviewUserId,-->
    <!--        R.reviewUserNickName,-->
    <!--        R.reviewClassName,-->
    <!--        R.reviewjoin_classId-->

    <!--        FROM academy A-->
    <!--        JOIN AcademyClass AC ON AC.aca_id = A.aca_id  &#45;&#45; 학원의 모든 클래스 JOIN-->
    <!--        LEFT JOIN LatestReviews R ON R.class_id = AC.classId  &#45;&#45; 클래스별 최신 리뷰 1개만 선택-->
    <!--        LEFT JOIN ReviewStats RS ON RS.aca_id = AC.aca_id  &#45;&#45; 클래스별 별점 평균 및 리뷰 개수-->
    <!--        LEFT JOIN UserCertification UC ON UC.class_id = AC.classId  &#45;&#45; 유저의 클래스별 수강 여부-->
    <!--        LEFT JOIN AcademyTag AT ON A.aca_id = AT.aca_id-->
    <!--        LEFT JOIN UserLikes UL ON UL.aca_id = A.aca_id-->
    <!--        LEFT JOIN LikeCount LC ON LC.aca_id = A.aca_id-->
    <!--        WHERE A.aca_id = #{acaId}-->
    <!--        ORDER BY R.reviewId DESC;-->
    <!--    </select>-->

    <resultMap id="AcademyResultMap" type="com.green.acamatch.academy.model.HB.GetAcademyDetailRes">
        <!-- 학원 정보 매핑 -->
        <id property="acaId" column="aca_id"/>
        <result property="acaName" column="aca_name"/>
        <result property="acaPic" column="aca_pic"/>
        <result property="address" column="address"/>
        <result property="detailAddress" column="detail_address"/>
        <result property="postNum" column="post_num"/>
        <result property="acaPhone" column="aca_phone"/>
        <result property="teacherNum" column="teacher_num"/>
        <result property="comments" column="comment"/>
        <result property="star" column="star"/>
        <result property="reviewCount" column="reviewCount"/>
        <result property="likeCount" column="likeCount"/>
        <result property="isLiked" column="isLiked"/>
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
        <association property="addressDto" javaType="com.green.acamatch.academy.model.AddressDto">
            <result property="address" column="address"/>
            <result property="detailAddress" column="detail_address"/>
            <result property="postNum" column="post_num"/>
        </association>
        <!-- 클래스 정보 매핑 (하위 리스트) -->
        <collection property="classes" ofType="com.green.acamatch.academy.model.HB.GetAcademyDetailClassDto" javaType="ArrayList" notNullColumn="classId">
            <id property="classId" column="classId"/>
            <result property="className" column="className"/>
            <result property="classComment" column="classComment"/>
            <result property="classStartDate" column="classStartDate"/>
            <result property="classEndDate" column="classEndDate"/>
            <result property="classStartTime" column="classStartTime"/>
            <result property="classEndTime" column="classEndTime"/>
            <result property="classPrice" column="classPrice"/>
            <result property="classDay" column="classDay"/>
            <result property="classCategoryName" column="classCategoryName"/>
            <result property="userCertification" column="userCertification"/>
            <result property="productId" column="productId"/>
        </collection>

        <collection property="books" ofType="com.green.acamatch.academy.model.HB.BookDto" javaType="ArrayList" notNullColumn="bookId">
            <result property="bookId" column="bookId"/>
            <result property="bookName" column="bookName"/>
            <result property="bookAmount" column="bookAmount"/>
            <result property="bookComment" column="bookComment"/>
            <result property="bookPic" column="bookPic"/>
            <result property="bookPrice" column="bookPrice"/>
            <result property="manager" column="manager"/>
            <result property="classId" column="classId"/>
        </collection>
    </resultMap>
    <select id="getAcademyWithClasses" resultMap="AcademyResultMap">
        WITH LatestReviews AS (
        SELECT
        A.comment AS reviewComment,
        A.star AS reviewStar,
        A.created_at AS reviewCreatedAt,
        A.updated_at AS reviewUpdatedAt,
        A.review_id AS reviewId,
        A.ban_review AS banReview,
        A.join_class_id AS joinClassId,
        B.user_id AS reviewUserId,
        D.nick_name AS reviewUserNickName,
        C.class_name AS reviewClassName,
        B.join_class_id AS reviewjoin_classId,
        C.aca_id,
        C.class_id,
        RP.`review_pic`
        FROM review A
        LEFT JOIN review_pic RP ON A.review_id = RP.review_id
        JOIN join_class B ON A.join_class_id = B.join_class_id
        JOIN aca_class C ON B.class_id = C.class_id
        JOIN user D ON B.user_id = D.user_id
        WHERE C.aca_id = #{acaId}
        ORDER BY A.review_id DESC
        LIMIT #{startIdx}, #{size}
        ),
        ReviewStats AS (
        SELECT
        C.class_id,
        C.aca_id,  -- 학원 ID 추가
        ROUND(AVG(A.star), 2) AS avgStar,  -- 클래스별 별점 평균
        (SELECT COUNT(*) FROM review A1
        JOIN join_class B1 ON A1.join_class_id = B1.join_class_id
        JOIN aca_class C1 ON B1.class_id = C1.class_id
        WHERE C1.aca_id = C.aca_id) AS reviewCount  -- 학원 전체 리뷰 개수
        FROM review A
        JOIN join_class B ON A.join_class_id = B.join_class_id
        JOIN aca_class C ON B.class_id = C.class_id
        GROUP BY C.class_id, C.aca_id  -- class_id 기준으로 그룹화
        ),
        AcademyClass AS (
        SELECT
        C.class_id AS classId,
        C.class_name AS className,
        C.class_comment AS classComment,
        C.start_date AS classStartDate,
        C.end_date AS classEndDate,
        C.start_time AS classStartTime,
        C.end_time AS classEndTime,
        C.price AS classPrice,
        GROUP_CONCAT(DISTINCT W.`day` ORDER BY W.`day_id` ASC SEPARATOR ', ') AS classDay,  -- 요일 리스트
        GROUP_CONCAT(DISTINCT CAT.category_name ORDER BY CAT.category_name ASC SEPARATOR ', ') AS classCategoryName,
        C.aca_id,
        P.product_id AS productId
        FROM aca_class C
        LEFT JOIN class_weekdays CW ON C.class_id = CW.class_id
        LEFT JOIN weekdays W ON CW.day_id = W.day_id
        LEFT JOIN class_category CC ON C.class_id = CC.class_id
        LEFT JOIN category CAT ON CC.category_id = CAT.category_id
        LEFT JOIN product P ON C.class_id = P.class_id
        GROUP BY C.class_id
        ),
        UserCertification AS (
        SELECT
        JC.class_id,
        CASE
        WHEN COUNT(JC.join_class_id) > 0 THEN 1
        ELSE 0
        END AS isCertified
        FROM join_class JC
        WHERE JC.user_id = #{signedUserId}  -- 특정 유저 ID
        GROUP BY JC.class_id
        ),
        UserLikes AS (
        SELECT
        L.aca_id,
        1 AS isLiked
        FROM `likes` L
        WHERE L.user_id = #{signedUserId}
        ),
        LikeCount AS (
        SELECT
        aca_id,
        COUNT(*) AS likeCount
        FROM `likes`
        GROUP BY aca_id
        ),
        AcademyTag AS (
        SELECT
        AT.aca_id,
        GROUP_CONCAT(DISTINCT T.tag_name ORDER BY T.tag_name ASC SEPARATOR ', ') AS tagName
        FROM academy_tag AS AT
        JOIN tag AS T
        ON AT.tag_id = T.tag_id
        GROUP BY AT.aca_id
        ),
        BookByClass AS (
        SELECT
        B.book_id AS bookId,
        B.book_name AS bookName,
        B.book_amount AS bookAmount,
        B.book_comment AS bookComment,
        B.book_pic AS bookPic,
        B.book_price AS bookPrice,
        B.manager,
        B.class_id AS classId,
        AC.aca_id  -- 학원 ID 추가
        FROM Book B
        JOIN aca_class AC ON B.class_id = AC.class_id
        WHERE AC.aca_id = #{acaId}  -- 특정 학원의 책만 가져오기
        )
        -- 최신 리뷰 관련 부분 제거
        SELECT
        A.aca_id,
        A.aca_name,
        A.address,
        A.detail_address,
        A.post_num,
        A.aca_phone,
        A.teacher_num,
        A.comment,
        AP.aca_pic,
        AT.tagName,

        -- 클래스별 정보
        COALESCE(AC.classId, 0) AS classId,
        COALESCE(AC.className, '') AS className,
        COALESCE(AC.classComment, '') AS classComment,
        COALESCE(AC.classStartDate, '') AS classStartDate,
        COALESCE(AC.classEndDate, '') AS classEndDate,
        COALESCE(AC.classStartTime, '') AS classStartTime,
        COALESCE(AC.classEndTime, '') AS classEndTime,
        COALESCE(AC.classPrice, 0) AS classPrice,
        COALESCE(AC.classDay, '') AS classDay,
        COALESCE(AC.classCategoryName, '') AS classCategoryName,
        COALESCE(AC.productId, 0) AS productId,

        COALESCE(BC.bookId, 0) AS bookId,
        COALESCE(BC.bookName, '') AS bookName,
        COALESCE(BC.bookAmount, 0) AS bookAmount,
        COALESCE(BC.bookComment, '') AS bookComment,
        COALESCE(BC.bookPic, '') AS bookPic,
        COALESCE(BC.bookPrice, 0) AS bookPrice,
        COALESCE(BC.manager, '') AS manager,
        COALESCE(BC.classId, 0) AS classId,

        -- 학원별 총 좋아요 수
        COALESCE(LC.likeCount, 0) AS likeCount,

        -- 클래스별 평균 별점 및 리뷰 개수
        COALESCE(RS.avgStar, 0) AS star,
        COALESCE(RS.reviewCount, 0) AS reviewCount,

        -- 해당 유저의 클래스별 수강 여부
        COALESCE(UC.isCertified, 0) AS userCertification,

        -- 해당 유저의 좋아요 여부 (학원 또는 클래스에 대한 좋아요)
        COALESCE(UL.isLiked, 0) AS isLiked

        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        LEFT JOIN AcademyClass AC ON AC.aca_id = A.aca_id
        LEFT JOIN BookByClass BC ON AC.classId = BC.classId
        LEFT JOIN ReviewStats RS ON RS.class_id = AC.classId
        LEFT JOIN UserCertification UC ON UC.class_id = AC.classId
        LEFT JOIN AcademyTag AT ON A.aca_id = AT.aca_id
        LEFT JOIN UserLikes UL ON UL.aca_id = A.aca_id
        LEFT JOIN LikeCount LC ON LC.aca_id = A.aca_id
        WHERE A.aca_id = #{acaId}
        AND A.aca_agree = 1
        LIMIT #{startIdx}, #{size};
    </select>

    <resultMap id="GeneralReviewResultMap" type="com.green.acamatch.academy.model.HB.GeneralReviewDto">
        <id property="reviewId" column="reviewId"/>
        <result property="reviewComment" column="reviewComment"/>
        <result property="reviewStar" column="reviewStar"/>
        <result property="reviewCreatedAt" column="reviewCreatedAt"/>
        <result property="reviewUpdatedAt" column="reviewUpdatedAt"/>
        <result property="reviewUserId" column="reviewUserId"/>
        <result property="reviewUserNickName" column="reviewUserNickName"/>
        <result property="reviewClassName" column="reviewClassName"/>
        <result property="writerPic" column="writerPic"/>
        <result property="joinClassId" column="joinClassId"/>
        <result property="banReview" column="banReview"/>
        <result property="classId" column="classId"/>
    </resultMap>

    <select id="getGeneralReviews" resultMap="GeneralReviewResultMap">
        WITH GeneralReviews AS (
        SELECT
        A.comment AS reviewComment,
        A.star AS reviewStar,
        A.created_at AS reviewCreatedAt,
        A.updated_at AS reviewUpdatedAt,
        A.review_id AS reviewId,
        A.ban_review AS banReview,
        A.join_class_id AS joinClassId,
        B.user_id AS reviewUserId,
        D.nick_name AS reviewUserNickName,
        D.user_pic AS writerPic,
        C.class_name AS reviewClassName,
        C.aca_id,
        B.class_id AS classId  -- join_class의 class_id 사용
        FROM review A
        JOIN join_class B ON A.join_class_id = B.join_class_id
        JOIN aca_class C ON B.class_id = C.class_id  -- INNER JOIN으로 변경
        JOIN user D ON B.user_id = D.user_id
        LEFT JOIN review_pic RP ON A.review_id = RP.review_id
        WHERE C.aca_id = #{acaId} AND RP.review_id IS NULL
        )
        SELECT * FROM GeneralReviews
        ORDER BY reviewId DESC
        LIMIT #{generalStartIdx}, #{size};
    </select>


    <resultMap id="MediaReviewResultMap" type="com.green.acamatch.academy.model.HB.MediaReviewDto">
        <id property="reviewId" column="reviewId"/>
        <result property="reviewComment" column="reviewComment"/>
        <result property="reviewStar" column="reviewStar"/>
        <result property="reviewCreatedAt" column="reviewCreatedAt"/>
        <result property="reviewUpdatedAt" column="reviewUpdatedAt"/>
        <result property="reviewUserId" column="reviewUserId"/>
        <result property="reviewUserNickName" column="reviewUserNickName"/>
        <result property="reviewClassName" column="reviewClassName"/>
        <result property="writerPic" column="writerPic"/>
        <result property="joinClassId" column="joinClassId"/>
        <result property="banReview" column="banReview"/>
        <result property="classId" column="classId"/>
        <result property="reviewPics" column="reviewPics" typeHandler="com.green.acamatch.config.model.StringToListTypeHandler"/>  <!-- String -> List 변환 -->
    </resultMap>


    <select id="getMediaReviews" resultMap="MediaReviewResultMap">
        WITH MediaReviews AS (
        SELECT
        A.comment AS reviewComment,
        A.star AS reviewStar,
        A.created_at AS reviewCreatedAt,
        A.updated_at AS reviewUpdatedAt,
        A.review_id AS reviewId,
        A.ban_review AS banReview,
        A.join_class_id AS joinClassId,
        B.user_id AS reviewUserId,
        D.nick_name AS reviewUserNickName,
        D.user_pic AS writerPic,
        C.class_name AS reviewClassName,
        C.aca_id,
        B.class_id AS classId,
        GROUP_CONCAT(DISTINCT RP.review_pic ORDER BY RP.review_pic ASC SEPARATOR ',') AS reviewPics
        FROM review A
        JOIN join_class B ON A.join_class_id = B.join_class_id
        JOIN aca_class C ON B.class_id = C.class_id
        JOIN user D ON B.user_id = D.user_id
        JOIN review_pic RP ON A.review_id = RP.review_id
        WHERE C.aca_id = #{acaId}
        GROUP BY A.review_id, D.user_pic, B.class_id
        )
        SELECT * FROM MediaReviews
        ORDER BY reviewId DESC
        LIMIT #{mediaStartIdx}, #{size};
    </select>




    <resultMap id="randomResultMap" type = "com.green.acamatch.academy.model.HB.GetAcademyRandomRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="starAvg" column="starAvg" />
        <result property="likeCount" column="likeCount" />
        <result property="reviewCount" column="reviewCount" />
        <result property="tagNames" column="tagNames" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>

    <select id="getAcademyListRandom" resultMap="randomResultMap">
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        COUNT(L.aca_id) AS likeCount,
        COALESCE(G.star, 0) AS starAvg,
        COALESCE(G.reviewCount, 0) AS reviewCount,
        AP.aca_pic AS acaPic,
        A.address AS address,
        A.detail_address,
        A.post_num,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagNames
        FROM academy A
        JOIN academy_pic AP
        ON A.aca_id = AP.aca_id
        LEFT JOIN `likes` L
        ON A.aca_id = L.aca_id
        LEFT JOIN academy_tag E
        ON A.aca_id = E.aca_id
        LEFT JOIN tag F
        ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        C.aca_id,
        ROUND(AVG(R.star), 2) AS star,
        COUNT(DISTINCT R.join_class_id) AS reviewCount
        FROM review R
        JOIN join_class JC
        ON JC.join_class_id = R.join_class_id
        JOIN aca_class C
        ON JC.class_id = C.class_id
        GROUP BY C.aca_id
        ) G
        ON G.aca_id = A.aca_id
        WHERE A.aca_agree = 1
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        GROUP BY A.aca_id
        ORDER BY RAND()
        LIMIT 0, 5
    </select>

    <select id="getAcademyListByStudent">
        SELECT DISTINCT
        A.aca_id,
        AP.aca_pic,
        A.aca_name,
        JC.registration_date
        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        JOIN aca_class C ON A.aca_id = C.aca_id
        JOIN join_class JC ON C.class_id = JC.class_id
        WHERE JC.user_id = #{signedUserId}
        ORDER BY A.aca_name ASC
        LIMIT #{startIdx}, #{size}
    </select>

    <select id="popularSearch">
        SELECT
        T.tag_name,
        COUNT(S.tag_id) AS tag_count
        FROM search S
        JOIN tag T ON S.tag_id = T.tag_id
        GROUP BY T.tag_name
        ORDER BY tag_count DESC
        LIMIT 0 ,10;
    </select>

    <resultMap id="Default" type = "com.green.acamatch.academy.model.HB.GetDefaultRes">
        <id property="acaId" column="acaId" />
        <result property="acaPic" column="acaPic" />
        <result property="acaName" column="acaName" />
        <result property="address" column="address" />
        <result property="star" column="star" />
        <result property="tagName" column="tagName" typeHandler="com.green.acamatch.config.exception.StringToListTypeHandler"/>
    </resultMap>

    <select id="getDefault" resultMap="Default">
        WITH premium_academies AS (
        -- 랜덤으로 프리미엄 학원 3개 선택
        SELECT A.aca_id, A.premium
        FROM academy A
        WHERE A.premium = 1
        AND A.aca_agree = 1
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        ORDER BY RAND()
        LIMIT 0, #{size}
        ), all_academies AS (
        -- 프리미엄 학원 데이터
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        AP.aca_pic AS acaPic,
        A.address AS address,
        A.premium,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star,
        0 AS premium_order,  -- 프리미엄 학원 우선
        RAND() AS rand_order  -- 랜덤 정렬을 위해 추가
        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        LEFT JOIN academy_tag E ON A.aca_id = E.aca_id
        LEFT JOIN tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN aca_class C ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G ON G.aca_id = A.aca_id
        WHERE A.aca_id IN (SELECT aca_id FROM premium_academies) -- 프리미엄 학원 필터링
        GROUP BY A.aca_id

        UNION ALL
        -- 일반 학원 데이터 (별점순 정렬)
        SELECT
        A.aca_id AS acaId,
        A.aca_name AS acaName,
        AP.aca_pic AS acaPic,
        A.address AS address,
        A.premium,
        IFNULL(GROUP_CONCAT(DISTINCT F.tag_name ORDER BY F.tag_id SEPARATOR ', '), '') AS tagName,
        COALESCE(G.star, 0) AS star,
        1 AS premium_order,  -- 일반 학원 우선순위 낮춤
        0 AS rand_order  -- 별점 정렬을 위해 랜덤 값 0
        FROM academy A
        JOIN academy_pic AP ON A.aca_id = AP.aca_id
        LEFT JOIN academy_tag E ON A.aca_id = E.aca_id
        LEFT JOIN tag F ON E.tag_id = F.tag_id
        LEFT JOIN (
        SELECT
        ROUND(AVG(R.star), 2) AS star,
        C.aca_id
        FROM review R
        JOIN aca_class C ON R.join_class_id = C.class_id
        GROUP BY C.aca_id
        ) G ON G.aca_id = A.aca_id
        WHERE A.premium = 0  -- 일반 학원 필터링
        AND A.aca_agree = 1
        AND NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        GROUP BY A.aca_id
        )

        -- ✅ 최종 정렬 (프리미엄 학원 → 랜덤 / 일반 학원 → 별점순)
        SELECT *, (SELECT COUNT(*) FROM all_academies) AS totalCount
        FROM all_academies
        ORDER BY premium_order, rand_order, star DESC
        LIMIT 0, 10
    </select>
    <select id="GetAcademyCount">
        SELECT COUNT(A.aca_id) AS academyCount, COUNT(U.user_id) AS userCount
        FROM academy A
        RIGHT JOIN user U
        ON A.user_id = U.user_id
    </select>
    <select id="getTagListByTagName">
        select tag_id
        from tag
        where tag_name = #{tagName}
    </select>
    <select id="getAcademyInfoByAcaNameClassNameExamNameAcaAgree">
        SELECT A.aca_name, AP.aca_pic,
        A.aca_id,
        GROUP_CONCAT(AP.aca_pic ORDER BY AP.aca_pic SEPARATOR ', ') AS aca_pics,
        A.`comment`, A.created_at, A.aca_phone, A.address, U.user_id, U.name,
        IFNULL(RC.reportsCount, 0) AS reportsCount
        FROM academy A
        LEFT JOIN academy_pic AP
        ON A.aca_id = AP.aca_id
        JOIN user U
        ON A.user_id = U.user_id
        LEFT JOIN aca_class AC
        ON A.aca_id = AC.aca_id
        LEFT JOIN exam E
        ON AC.class_id = E.class_id
        LEFT JOIN (
        SELECT R.aca_id, COUNT(R.report_id) AS reportsCount
        FROM reports R
        GROUP BY R.aca_id
        ) RC ON A.aca_id = RC.aca_id
        <where>
            <if test=" acaName != null and acaName != '' ">
                AND A.aca_name like CONCAT('%', #{acaName}, '%')
            </if>
            <if test=" className != null and className != '' ">
                AND AC.class_name like CONCAT('%', #{className}, '%')
            </if>
            <if test=" examName != null and examName != '' ">
                AND E.exam_name like CONCAT('%', #{examName}, '%')
            </if>
            <if test=" acaAgree != null ">
                AND A.aca_agree = #{acaAgree}
            </if>
        </where>
        GROUP BY A.aca_id
        LIMIT #{startIdx}, #{size}
    </select>
    <select id="getAcademyListByDistance">
        SELECT
        A.aca_id,
        A.aca_name,
        AP.aca_pic,
        A.address,
        A.detail_address,
        A.post_num,
        IFNULL(`AS`.starAvg, 0) AS starAvg,
        IFNULL(GROUP_CONCAT(DISTINCT T.tag_name ORDER BY T.tag_id SEPARATOR ', '), '') AS tagNames,
        IFNULL(LC.likeCount, 0) AS likeCount,
        IFNULL(`AS`.reviewCount, 0) AS reviewCount,
        (6371 * ACOS(COS(RADIANS(#{lat}))
        * COS(RADIANS(A.lat))
        * COS(RADIANS(A.lon) - RADIANS(#{lon}))
        + SIN(RADIANS(#{lat}))
        * SIN(RADIANS(A.lat)))) AS distance
        FROM academy A
        LEFT JOIN academy_pic AP ON A.aca_id = AP.aca_id
        LEFT JOIN academy_tag AT ON A.aca_id = AT.aca_id
        LEFT JOIN tag T ON AT.tag_id = T.tag_id
        LEFT JOIN (
        SELECT AVG(ROUND(R.star, 0)) AS starAvg, A.aca_id, COUNT(R.review_id) AS reviewCount
        FROM review R
        JOIN join_class JC ON R.join_class_id = JC.join_class_id
        JOIN aca_class AC ON JC.class_id = AC.class_id
        JOIN academy A ON AC.aca_id = A.aca_id
        GROUP BY A.aca_id
        ) `AS` ON A.aca_id = `AS`.aca_id
        LEFT JOIN (
        SELECT COUNT(L.aca_id) AS likeCount, A.aca_id
        FROM academy A
        LEFT JOIN likes L ON A.aca_id = L.aca_id
        GROUP BY A.aca_id
        ) LC ON A.aca_id = LC.aca_id
        WHERE NOT EXISTS (
        SELECT 1
        FROM reports r
        WHERE r.aca_id = A.aca_id
        AND (r.exposure_end_date IS NULL OR r.exposure_end_date > NOW())
        )
        GROUP BY A.aca_id
        ORDER BY distance ASC
        LIMIT #{startIdx}, #{size}
    </select>
    <select id="getAcaNameList">
        SELECT aca_name
        FROM academy
        WHERE aca_name like CONCAT('%', #{acaName}, '%')
    </select>
    <select id="getAcademyListByAcaNameOrderType">
        SELECT
        A.aca_name,
        A.comment,
        AP.aca_pic,
        AC.created_at,
        AC.price,
        U.name,
        AC.cost_status
        FROM academy A
        LEFT JOIN academy_pic AP ON A.aca_id = AP.aca_id
        JOIN academy_cost AC ON A.aca_id = AC.aca_id
        JOIN user U ON AC.user_id = U.user_id
        <where>
            <if test="acaName != null and acaName != ''">
                AND A.aca_name LIKE CONCAT('%', #{acaName}, '%')
            </if>
            <if test="orderType != null and orderType != ''">
                AND AC.order_type = #{orderType}
            </if>
            <if test="userName != null and userName != ''">
                AND U.user_name LIKE CONCAT('%', #{userName}, '%')
            </if>
            <if test="startDate != null and startDate != ''">
                AND AC.created_at &gt;= #{startDate}
            </if>
            <if test="endDate != null and endDate != ''">
                AND AC.created_at &lt;= #{endDate}
            </if>
        </where>
    </select>
    <select id="getAcademyListByAcaNameAndDate">
    </select>
    <select id="getSearchInfo">
        SELECT COUNT(S.tag_id) AS tagCount, tag_name, TT.totalTagCount
        FROM search S
        JOIN tag T ON S.tag_id = T.tag_id
        LEFT JOIN
        (
        SELECT COUNT(S.tag_id) AS totalTagCount, T.tag_id
        FROM search S
        JOIN tag T ON S.tag_id = T.tag_id
        ) TT
        ON S.tag_id = TT.tag_id
        WHERE 1=1
        <if test='week == "이번주"'>
            AND YEARWEEK(S.created_at) = YEARWEEK(NOW())
        </if>
        <if test='week == "지난주"'>
            AND YEARWEEK(S.created_at) = YEARWEEK(NOW() - INTERVAL 1 WEEK)
        </if>
        GROUP BY S.tag_id
    </select>
</mapper>
