<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.green.acamatch.manager.ManagerMapper">
    <select id="getAcademyCount">
        SELECT
        DATE(A.created_at) AS register_date,
        COUNT(*) AS totalAcademyCount
        FROM academy A
        WHERE YEAR(A.created_at) = #{year}
        AND MONTH(A.created_at) = #{month}
        GROUP BY DAY(A.created_at)
        ORDER BY DAY(A.created_at);
    </select>
    <select id="getUserCount">
        SELECT DATE(U.created_at) AS register_date,
        COUNT(*) AS totalUserCount
        FROM user U
        WHERE YEAR(U.created_at) = #{year}
        AND MONTH(U.created_at) = #{month}
        GROUP BY DAY(U.created_at)
        ORDER BY DAY(U.created_at);
    </select>
    <select id="getAcademyCostCount">
        SELECT
        DATE(A.created_at) AS register_date,
        COUNT(*) AS academyCostCount
        FROM academy_cost A
        LEFT JOIN refund R ON A.cost_id = R.cost_id
        WHERE R.cost_id IS NULL
        AND YEAR(A.created_at) = #{year}
        AND MONTH(A.created_at) = #{month}
        GROUP BY register_date
        ORDER BY register_date;
    </select>
    <select id="getAcademyCostByUserId">
        SELECT DISTINCT DATE(AC.created_at) AS paymentDate,
        COUNT(*) AS paymentCount
        FROM academy A
        JOIN aca_class C ON A.aca_id = C.aca_id
        JOIN book B ON A.aca_id = B.aca_id
        JOIN product P ON B.book_id = P.book_id OR C.class_id = P.class_id
        JOIN academy_cost AC ON P.product_id = AC.product_id
        LEFT JOIN refund R ON AC.cost_id = R.cost_id
        WHERE R.cost_id IS NULL
        AND YEAR(AC.created_at) = #{year}
        AND MONTH(AC.created_at) = #{month}
        AND P.product_id != 1
        AND A.user_id = #{userId}
        GROUP BY paymentDate
        ORDER BY paymentDate;
    </select>
    <select id="getUserCountByUserId">
        SELECT DATE(JC.registration_date) AS paymentDate,
        COUNT(*) AS paymentCount
        FROM academy A
        JOIN aca_class C ON A.aca_id = C.aca_id
        JOIN join_class JC ON C.class_id = JC.class_id
        WHERE YEAR(JC.registration_date) = #{year}
        AND MONTH(JC.registration_date) = #{month}
        AND A.user_id = #{userId}
        GROUP BY DATE(JC.registration_date)
        ORDER BY DATE(JC.registration_date);
    </select>
    <select id="GetUserInfoList">
        SELECT U.name, U.user_pic, U.email, JC.registration_date, A.aca_name, C.class_name,
        U.phone, JC.certification, JC.join_class_id,
        COUNT(*) OVER() AS totalCount
        FROM join_class JC
        JOIN aca_class C ON JC.class_id = C.class_id
        JOIN academy A ON C.aca_id = A.aca_id
        JOIN user U ON JC.user_id = U.user_id
        WHERE A.user_id = #{userId}
        <if test="certification != null">
            AND JC.certification = #{certification}
        </if>
        <if test=" name != null and name != '' ">
            AND U.name like CONCAT('%', #{name}, '%')
        </if>
        LIMIT #{startIdx}, #{size}
    </select>
    <select id="GetAcademyCostInfoByUserId">
        WITH FilteredCosts AS (
        SELECT DISTINCT AC.cost_id, AC.price, AC.fee, AC.product_id, AC.created_at, A.user_id
        FROM academy_cost AC
        JOIN product P ON AC.product_id = P.product_id
        JOIN aca_class CL ON P.class_id = CL.class_id
        JOIN book B ON CL.class_id = B.class_id
        JOIN academy A ON B.aca_id = A.aca_id
        LEFT JOIN refund R ON AC.cost_id = R.cost_id  -- 환불 내역과 LEFT JOIN
        WHERE AC.cost_status = 2
        AND A.user_id = #{userId}
        AND YEAR(AC.created_at) = YEAR(NOW())
        AND WEEK(AC.created_at, 1) = WEEK(NOW(), 1)  -- ISO 8601 기준 (월요일 시작)
        AND R.cost_id IS NULL  -- 환불되지 않은 데이터만 필터링
        )
        SELECT
        SUM(FC.price - FC.fee) AS sumFee,  -- 중복 제거 후 합산
        COUNT(FC.cost_id) AS costCount,  -- 중복 제거 후 개수 계산
        (
        (
        SELECT COUNT(DISTINCT PX.product_id)  -- 중복 제거 후 교재 판매 개수 계산
        FROM academy_cost AX
        JOIN product PX ON PX.book_id IS NOT NULL AND AX.product_id = PX.product_id
        JOIN book B ON PX.book_id = B.book_id
        JOIN academy AXD ON B.aca_id = AXD.aca_id
        LEFT JOIN refund RX ON AX.cost_id = RX.cost_id  -- 환불 내역과 JOIN
        WHERE AXD.user_id = FC.user_id
        AND RX.cost_id IS NULL  -- 환불되지 않은 데이터만 필터링
        ) / (
        SELECT SUM(BX.book_amount)
        FROM book BX
        JOIN academy AXB ON BX.aca_id = AXB.aca_id
        WHERE AXB.user_id = FC.user_id
        )
        ) AS saleRate
        FROM FilteredCosts FC
        GROUP BY FC.user_id;
    </select>
</mapper>